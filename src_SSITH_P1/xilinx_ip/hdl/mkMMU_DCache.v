//
// Generated by Bluespec Compiler, version untagged-gad02e931 (build ad02e931)
//
// On Fri Jul 23 15:58:07 EEST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    97 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    97 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// events                         O    14 reg
// RDY_events                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct5                 I     5 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_b_put_val           I     6 reg
// mem_master_r_put_val           I    72 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
//
// Combinational paths from inputs to outputs:
//   EN_commit -> valid
//   EN_commit -> word128_fst
//   EN_commit -> word128_snd
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct5,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_aw_canPeek,

		    mem_master_aw_peek,
		    RDY_mem_master_aw_peek,

		    EN_mem_master_aw_drop,
		    RDY_mem_master_aw_drop,

		    mem_master_w_canPeek,

		    mem_master_w_peek,
		    RDY_mem_master_w_peek,

		    EN_mem_master_w_drop,
		    RDY_mem_master_w_drop,

		    mem_master_b_canPut,

		    mem_master_b_put_val,
		    EN_mem_master_b_put,
		    RDY_mem_master_b_put,

		    mem_master_ar_canPeek,

		    mem_master_ar_peek,
		    RDY_mem_master_ar_peek,

		    EN_mem_master_ar_drop,
		    RDY_mem_master_ar_drop,

		    mem_master_r_canPut,

		    mem_master_r_put_val,
		    EN_mem_master_r_put,
		    RDY_mem_master_r_put,

		    events,
		    RDY_events);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [4 : 0] req_amo_funct5;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [96 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [5 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [96 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [71 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // value method events
  output [13 : 0] events;
  output RDY_events;

  // signals for module outputs
  wire [127 : 0] st_amo_val_snd, word128_snd;
  wire [96 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] mem_master_w_peek;
  wire [31 : 0] addr;
  wire [13 : 0] events;
  wire [5 : 0] exc_code;
  wire RDY_events,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [128 : 0] cache_dw_output_ld_val$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [13 : 0] cache_aw_events_wires_ifc_ifc_wires_1$wget,
		cache_aw_events_wires_ifc_ifc_wires_3$wget,
		cache_aw_events_wires_ifc_ifc_wires_4$wget,
		cache_aw_events_wires_ifc_ifc_wires_6$wget;
  wire cache_dw_output_ld_val$whas,
       cache_dw_output_st_amo_val$whas,
       cache_dw_valid$wget,
       cache_dw_valid$whas,
       cache_rw_reset_req$whas;

  // register cache_aw_events_register
  reg [13 : 0] cache_aw_events_register;
  wire [13 : 0] cache_aw_events_register$D_IN;
  wire cache_aw_events_register$EN;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_allow_cap
  reg cache_rg_allow_cap;
  wire cache_rg_allow_cap$D_IN, cache_rg_allow_cap$EN;

  // register cache_rg_amo_funct5
  reg [4 : 0] cache_rg_amo_funct5;
  wire [4 : 0] cache_rg_amo_funct5$D_IN;
  wire cache_rg_amo_funct5$EN;

  // register cache_rg_cache_rereq_data
  reg cache_rg_cache_rereq_data;
  wire cache_rg_cache_rereq_data$D_IN, cache_rg_cache_rereq_data$EN;

  // register cache_rg_cset_in_cache
  reg [6 : 0] cache_rg_cset_in_cache;
  wire [6 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_tag
  reg cache_rg_lower_tag;
  wire cache_rg_lower_tag$D_IN, cache_rg_lower_tag$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  reg cache_rg_lower_word64_full$D_IN;
  wire cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_mem_req_sent
  reg cache_rg_mem_req_sent;
  wire cache_rg_mem_req_sent$D_IN, cache_rg_mem_req_sent$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_tlb_walk
  reg cache_rg_tlb_walk;
  wire cache_rg_tlb_walk$D_IN, cache_rg_tlb_walk$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_fabric_write_reqs
  reg [163 : 0] cache_f_fabric_write_reqs$D_IN;
  wire [163 : 0] cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_masterPortShim_arff
  reg [96 : 0] cache_masterPortShim_arff$D_IN;
  wire [96 : 0] cache_masterPortShim_arff$D_OUT;
  wire cache_masterPortShim_arff$CLR,
       cache_masterPortShim_arff$DEQ,
       cache_masterPortShim_arff$EMPTY_N,
       cache_masterPortShim_arff$ENQ,
       cache_masterPortShim_arff$FULL_N;

  // ports of submodule cache_masterPortShim_awff
  wire [96 : 0] cache_masterPortShim_awff$D_IN,
		cache_masterPortShim_awff$D_OUT;
  wire cache_masterPortShim_awff$CLR,
       cache_masterPortShim_awff$DEQ,
       cache_masterPortShim_awff$EMPTY_N,
       cache_masterPortShim_awff$ENQ,
       cache_masterPortShim_awff$FULL_N;

  // ports of submodule cache_masterPortShim_bff
  wire [5 : 0] cache_masterPortShim_bff$D_IN, cache_masterPortShim_bff$D_OUT;
  wire cache_masterPortShim_bff$CLR,
       cache_masterPortShim_bff$DEQ,
       cache_masterPortShim_bff$EMPTY_N,
       cache_masterPortShim_bff$ENQ,
       cache_masterPortShim_bff$FULL_N;

  // ports of submodule cache_masterPortShim_rff
  wire [71 : 0] cache_masterPortShim_rff$D_IN, cache_masterPortShim_rff$D_OUT;
  wire cache_masterPortShim_rff$CLR,
       cache_masterPortShim_rff$DEQ,
       cache_masterPortShim_rff$EMPTY_N,
       cache_masterPortShim_rff$ENQ,
       cache_masterPortShim_rff$FULL_N;

  // ports of submodule cache_masterPortShim_wff
  wire [73 : 0] cache_masterPortShim_wff$D_IN, cache_masterPortShim_wff$D_OUT;
  wire cache_masterPortShim_wff$CLR,
       cache_masterPortShim_wff$DEQ,
       cache_masterPortShim_wff$EMPTY_N,
       cache_masterPortShim_wff$ENQ,
       cache_masterPortShim_wff$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [6 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_aw_events_update_reg,
       CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_do_set_req_valid,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_count_miss_lat,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE___me_check_19,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_aw_events_update_reg,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_do_set_req_valid,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_count_miss_lat,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE___me_check_19,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [163 : 0] MUX_cache_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_4,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_1,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [96 : 0] MUX_cache_masterPortShim_arff$enq_1__VAL_1,
		MUX_cache_masterPortShim_arff$enq_1__VAL_2,
		MUX_cache_masterPortShim_arff$enq_1__VAL_3;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1,
		MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1;
  wire [5 : 0] MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_4,
	       MUX_cache_rg_exc_code$write_1__VAL_5;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_11,
	       MUX_cache_rg_state$write_1__VAL_13,
	       MUX_cache_rg_state$write_1__VAL_3,
	       MUX_cache_rg_state$write_1__VAL_7;
  wire MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_dw_valid$wset_1__SEL_3,
       MUX_cache_f_fabric_write_reqs$enq_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__PSEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_ld_val$write_1__SEL_1,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lower_word64$write_1__SEL_2,
       MUX_cache_rg_lower_word64_full$write_1__SEL_1,
       MUX_cache_rg_lower_word64_full$write_1__SEL_2,
       MUX_cache_rg_lower_word64_full$write_1__SEL_4,
       MUX_cache_rg_lower_word64_full$write_1__VAL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_11,
       MUX_cache_rg_state$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_3,
       MUX_cache_rg_state$write_1__SEL_4,
       MUX_cache_rg_state$write_1__SEL_5,
       MUX_cache_rg_state$write_1__SEL_6,
       MUX_cache_rg_state$write_1__SEL_7,
       MUX_cache_rg_state$write_1__SEL_8;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h6271;
  reg [31 : 0] v__h21776;
  reg [31 : 0] v__h26385;
  reg [31 : 0] v__h31878;
  reg [31 : 0] v__h32636;
  reg [31 : 0] v__h32914;
  reg [31 : 0] v__h5565;
  reg [31 : 0] v__h35362;
  reg [31 : 0] v__h35867;
  reg [31 : 0] v__h37094;
  reg [31 : 0] v__h37229;
  reg [31 : 0] v__h36924;
  reg [31 : 0] v__h37358;
  reg [31 : 0] v__h37468;
  reg [31 : 0] v__h37558;
  reg [31 : 0] v__h37794;
  reg [31 : 0] v__h37938;
  reg [31 : 0] v__h38388;
  reg [31 : 0] v__h38792;
  reg [31 : 0] v__h41101;
  reg [31 : 0] v__h38720;
  reg [31 : 0] v__h41343;
  reg [31 : 0] v__h41571;
  reg [31 : 0] v__h41776;
  reg [31 : 0] v__h41728;
  reg [31 : 0] v__h6048;
  reg [31 : 0] v__h6143;
  reg [31 : 0] v__h42685;
  reg [31 : 0] v__h5559;
  reg [31 : 0] v__h6042;
  reg [31 : 0] v__h6137;
  reg [31 : 0] v__h6265;
  reg [31 : 0] v__h21770;
  reg [31 : 0] v__h26379;
  reg [31 : 0] v__h31872;
  reg [31 : 0] v__h32630;
  reg [31 : 0] v__h32908;
  reg [31 : 0] v__h35356;
  reg [31 : 0] v__h35861;
  reg [31 : 0] v__h36918;
  reg [31 : 0] v__h37088;
  reg [31 : 0] v__h37223;
  reg [31 : 0] v__h37352;
  reg [31 : 0] v__h37462;
  reg [31 : 0] v__h37552;
  reg [31 : 0] v__h37788;
  reg [31 : 0] v__h37932;
  reg [31 : 0] v__h38382;
  reg [31 : 0] v__h38714;
  reg [31 : 0] v__h38786;
  reg [31 : 0] v__h41095;
  reg [31 : 0] v__h41337;
  reg [31 : 0] v__h41565;
  reg [31 : 0] v__h41722;
  reg [31 : 0] v__h41770;
  reg [31 : 0] v__h42679;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q59,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q60,
		IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001,
		IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018,
		IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027,
		IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887,
		IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904,
		IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913,
		x__h23083,
		x__h27006;
  reg [63 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6702_ETC__q61,
	       IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294,
	       IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792,
	       IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796,
	       IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498,
	       IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931,
	       _theResult_____2__h27096,
	       _theResult_____2__h38915,
	       _theResult___snd__h40795,
	       _theResult___snd__h7690,
	       _theResult___snd_fst__h20596,
	       _theResult___snd_fst__h26074,
	       _theResult___snd_fst__h36221,
	       _theResult___snd_snd__h20597,
	       _theResult___snd_snd__h39098,
	       mem_req_wr_data_wdata__h4941,
	       w1__h26921,
	       w1__h26926,
	       w1__h38877,
	       w1__h38882;
  reg [7 : 0] mem_req_wr_data_wstrb__h4942;
  reg [2 : 0] _theResult___snd_fst_val__h4897, size_val__h38221;
  wire [129 : 0] cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547,
		 y__h7741;
  wire [128 : 0] IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1046;
  wire [127 : 0] IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1038,
		 IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968,
		 new_st_val_128__h27097,
		 new_st_val_128__h38916,
		 x__h20595,
		 x__h31266,
		 x__h33182,
		 x__h38910,
		 x__h41079;
  wire [63 : 0] IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d566,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d571,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d576,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d581,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d586,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d591,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d596,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d601,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d605,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d610,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d615,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d620,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d625,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d630,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d635,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d640,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d660,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d664,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d668,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d672,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d676,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d680,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d684,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d688,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d700,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d704,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d708,
		SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d712,
		_theResult___snd__h36168,
		cline_fabric_addr__h31927,
		fabric_addr__h37986,
		mem_req_wr_addr_awaddr__h4791,
		new_st_val_64__h27102,
		new_st_val_64__h27174,
		new_st_val_64__h28371,
		new_st_val_64__h28375,
		new_st_val_64__h28379,
		new_st_val_64__h28383,
		new_st_val_64__h28388,
		new_st_val_64__h28394,
		new_st_val_64__h28399,
		new_st_val_64__h38921,
		new_st_val_64__h38993,
		new_st_val_64__h40904,
		new_st_val_64__h40908,
		new_st_val_64__h40912,
		new_st_val_64__h40916,
		new_st_val_64__h40921,
		new_st_val_64__h40927,
		new_st_val_64__h40932,
		result_hi__h39103,
		result_lo__h20634,
		result_lo__h20669,
		result_lo__h20702,
		result_lo__h20735,
		result_lo__h20768,
		result_lo__h20801,
		result_lo__h20834,
		result_lo__h20867,
		result_lo__h20900,
		result_lo__h20933,
		result_lo__h20966,
		result_lo__h20999,
		result_lo__h21032,
		result_lo__h21065,
		result_lo__h21098,
		result_lo__h21131,
		result_lo__h21186,
		result_lo__h21219,
		result_lo__h21252,
		result_lo__h21285,
		result_lo__h21318,
		result_lo__h21351,
		result_lo__h21384,
		result_lo__h21417,
		result_lo__h21464,
		result_lo__h21497,
		result_lo__h21530,
		result_lo__h21563,
		result_lo__h36258,
		result_lo__h36291,
		result_lo__h36324,
		result_lo__h36357,
		result_lo__h36390,
		result_lo__h36423,
		result_lo__h36456,
		result_lo__h36489,
		result_lo__h36552,
		result_lo__h36585,
		result_lo__h36618,
		result_lo__h36651,
		result_lo__h36702,
		result_lo__h36735,
		result_lo__h39102,
		result_lo__h39870,
		result_lo__h39901,
		result_lo__h39932,
		result_lo__h39963,
		result_lo__h39994,
		result_lo__h40025,
		result_lo__h40056,
		result_lo__h40087,
		result_lo__h40118,
		result_lo__h40149,
		result_lo__h40180,
		result_lo__h40211,
		result_lo__h40242,
		result_lo__h40273,
		result_lo__h40304,
		result_lo__h40335,
		result_lo__h40388,
		result_lo__h40419,
		result_lo__h40450,
		result_lo__h40481,
		result_lo__h40512,
		result_lo__h40543,
		result_lo__h40574,
		result_lo__h40605,
		result_lo__h40650,
		result_lo__h40681,
		result_lo__h40712,
		result_lo__h40743,
		w1___1__h27141,
		w1___1__h38960,
		w2__h26928,
		word64__h4878,
		x__h27100,
		x__h38919;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q78,
		cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3,
		cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q11,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q45,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q46,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q47,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q48,
		cache_rg_st_amo_val_BITS_31_TO_0__q58,
		cline_addr__h31926,
		result_hi9103_BITS_31_TO_0__q17,
		result_hi9103_BITS_63_TO_32__q22,
		result_lo9102_BITS_31_TO_0__q64,
		result_lo9102_BITS_63_TO_32__q71,
		w16921_BITS_31_TO_0__q57,
		w18877_BITS_31_TO_0__q76;
  wire [21 : 0] pa_ctag__h7039;
  wire [15 : 0] cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2,
		cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6,
		cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9,
		cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q29,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q31,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q33,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q35,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q37,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q39,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q42,
		cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q43,
		result_hi9103_BITS_15_TO_0__q16,
		result_hi9103_BITS_31_TO_16__q20,
		result_hi9103_BITS_47_TO_32__q24,
		result_hi9103_BITS_63_TO_48__q27,
		result_lo9102_BITS_15_TO_0__q63,
		result_lo9102_BITS_31_TO_16__q67,
		result_lo9102_BITS_47_TO_32__q70,
		result_lo9102_BITS_63_TO_48__q74;
  wire [12 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d300;
  wire [10 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d299;
  wire [8 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d298;
  wire [7 : 0] cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1,
	       cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4,
	       cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5,
	       cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7,
	       cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8,
	       cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q10,
	       cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12,
	       cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q30,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q32,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q34,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q36,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q38,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q40,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q41,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q44,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q49,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q50,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q51,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q52,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q53,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q54,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q55,
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q56,
	       result_hi9103_BITS_15_TO_8__q18,
	       result_hi9103_BITS_23_TO_16__q19,
	       result_hi9103_BITS_31_TO_24__q21,
	       result_hi9103_BITS_39_TO_32__q23,
	       result_hi9103_BITS_47_TO_40__q25,
	       result_hi9103_BITS_55_TO_48__q26,
	       result_hi9103_BITS_63_TO_56__q28,
	       result_hi9103_BITS_7_TO_0__q15,
	       result_lo9102_BITS_15_TO_8__q65,
	       result_lo9102_BITS_23_TO_16__q66,
	       result_lo9102_BITS_31_TO_24__q68,
	       result_lo9102_BITS_39_TO_32__q69,
	       result_lo9102_BITS_47_TO_40__q73,
	       result_lo9102_BITS_55_TO_48__q72,
	       result_lo9102_BITS_63_TO_56__q75,
	       result_lo9102_BITS_7_TO_0__q62,
	       strobe128__h4879,
	       strobe128__h4883,
	       strobe128__h4887,
	       strobe128__h4891;
  wire [6 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d297;
  wire [5 : 0] access_exc_code__h4579, shift_bits__h4807;
  wire [4 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d296;
  wire [3 : 0] IF_NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache__ETC___d1101,
	       IF_cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_ETC___d1104,
	       IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1103,
	       cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304,
	       x__h26983;
  wire [2 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d295;
  wire [1 : 0] _0__q77, x__h26839, x__h26880, x__h33177, y__h27004;
  wire IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d424,
       IF_cache_rg_width_code_71_EQ_0b11_80_THEN_IF_c_ETC___d555,
       IF_cache_w_req_width_code_whas__569_THEN_cache_ETC___d1664,
       IF_cache_w_req_width_code_whas__569_THEN_cache_ETC___d1669,
       NOT_IF_cache_w_req_width_code_whas__569_THEN_c_ETC___d1648,
       NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145,
       NOT_cache_f_reset_reqs_notEmpty__49_27_AND_cac_ETC___d1216,
       NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d443,
       NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1065,
       NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1076,
       NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1086,
       NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090,
       NOT_cache_rg_op_87_EQ_1_94_54_AND_NOT_cache_rg_ETC___d808,
       NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1040,
       NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1063,
       NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1069,
       NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1074,
       NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d806,
       _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224,
       cache_cfg_verbosity_read__45_ULE_1___d346,
       cache_masterPortShim_rff_i_notEmpty__139_AND_N_ETC___d1386,
       cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419,
       cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d1093,
       cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d444,
       cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441,
       cache_rg_amo_funct5_90_EQ_0b10_91_AND_NOT_cach_ETC___d760,
       cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401,
       cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d464,
       cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d466,
       cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d469,
       cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d743,
       cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d756,
       cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d1042,
       cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d462,
       cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d809,
       cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d1080,
       cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d412,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1044,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1098,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1112,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1115,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d766,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d811,
       lrsc_result__h22613,
       mem_req_wr_data_wuser__h4944;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas && cache_dw_valid$wget ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst =
	     cache_dw_output_ld_val$whas && cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst =
	     cache_dw_output_st_amo_val$whas &&
	     cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = cache_masterPortShim_awff$EMPTY_N ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = cache_masterPortShim_awff$D_OUT ;
  assign RDY_mem_master_aw_peek = cache_masterPortShim_awff$EMPTY_N ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = cache_masterPortShim_wff$EMPTY_N ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = cache_masterPortShim_wff$D_OUT ;
  assign RDY_mem_master_w_peek = cache_masterPortShim_wff$EMPTY_N ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = cache_masterPortShim_bff$FULL_N ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = cache_masterPortShim_arff$EMPTY_N ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = cache_masterPortShim_arff$D_OUT ;
  assign RDY_mem_master_ar_peek = cache_masterPortShim_arff$EMPTY_N ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = cache_masterPortShim_rff$FULL_N ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // value method events
  assign events = cache_aw_events_register ;
  assign RDY_events = 1'd1 ;

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd164),
	  .guarded(1'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_f_fabric_write_reqs$D_IN),
						    .ENQ(cache_f_fabric_write_reqs$ENQ),
						    .DEQ(cache_f_fabric_write_reqs$DEQ),
						    .CLR(cache_f_fabric_write_reqs$CLR),
						    .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						    .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						    .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_reqs$D_IN),
							    .ENQ(cache_f_reset_reqs$ENQ),
							    .DEQ(cache_f_reset_reqs$DEQ),
							    .CLR(cache_f_reset_reqs$CLR),
							    .D_OUT(cache_f_reset_reqs$D_OUT),
							    .FULL_N(cache_f_reset_reqs$FULL_N),
							    .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_rsps(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_rsps$D_IN),
							    .ENQ(cache_f_reset_rsps$ENQ),
							    .DEQ(cache_f_reset_rsps$DEQ),
							    .CLR(cache_f_reset_rsps$CLR),
							    .D_OUT(cache_f_reset_rsps$D_OUT),
							    .FULL_N(cache_f_reset_rsps$FULL_N),
							    .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_masterPortShim_arff
  FIFO2 #(.width(32'd97),
	  .guarded(1'd1)) cache_masterPortShim_arff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_arff$D_IN),
						    .ENQ(cache_masterPortShim_arff$ENQ),
						    .DEQ(cache_masterPortShim_arff$DEQ),
						    .CLR(cache_masterPortShim_arff$CLR),
						    .D_OUT(cache_masterPortShim_arff$D_OUT),
						    .FULL_N(cache_masterPortShim_arff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_arff$EMPTY_N));

  // submodule cache_masterPortShim_awff
  FIFO2 #(.width(32'd97),
	  .guarded(1'd1)) cache_masterPortShim_awff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_awff$D_IN),
						    .ENQ(cache_masterPortShim_awff$ENQ),
						    .DEQ(cache_masterPortShim_awff$DEQ),
						    .CLR(cache_masterPortShim_awff$CLR),
						    .D_OUT(cache_masterPortShim_awff$D_OUT),
						    .FULL_N(cache_masterPortShim_awff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_awff$EMPTY_N));

  // submodule cache_masterPortShim_bff
  FIFO2 #(.width(32'd6), .guarded(1'd1)) cache_masterPortShim_bff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_masterPortShim_bff$D_IN),
								  .ENQ(cache_masterPortShim_bff$ENQ),
								  .DEQ(cache_masterPortShim_bff$DEQ),
								  .CLR(cache_masterPortShim_bff$CLR),
								  .D_OUT(cache_masterPortShim_bff$D_OUT),
								  .FULL_N(cache_masterPortShim_bff$FULL_N),
								  .EMPTY_N(cache_masterPortShim_bff$EMPTY_N));

  // submodule cache_masterPortShim_rff
  FIFO2 #(.width(32'd72),
	  .guarded(1'd1)) cache_masterPortShim_rff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_rff$D_IN),
						   .ENQ(cache_masterPortShim_rff$ENQ),
						   .DEQ(cache_masterPortShim_rff$DEQ),
						   .CLR(cache_masterPortShim_rff$CLR),
						   .D_OUT(cache_masterPortShim_rff$D_OUT),
						   .FULL_N(cache_masterPortShim_rff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_rff$EMPTY_N));

  // submodule cache_masterPortShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) cache_masterPortShim_wff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_wff$D_IN),
						   .ENQ(cache_masterPortShim_wff$ENQ),
						   .DEQ(cache_masterPortShim_wff$DEQ),
						   .CLR(cache_masterPortShim_wff$CLR),
						   .D_OUT(cache_masterPortShim_wff$D_OUT),
						   .FULL_N(cache_masterPortShim_wff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_wff$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							  .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							  .DIA(cache_ram_state_and_ctag_cset$DIA),
							  .DIB(cache_ram_state_and_ctag_cset$DIB),
							  .WEA(cache_ram_state_and_ctag_cset$WEA),
							  .WEB(cache_ram_state_and_ctag_cset$WEB),
							  .ENA(cache_ram_state_and_ctag_cset$ENA),
							  .ENB(cache_ram_state_and_ctag_cset$ENB),
							  .DOA(),
							  .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_uart16550_1_addr_range(),
			  .m_iic_0_addr_range(),
			  .m_axi_quad_spi_0_full_addr_range(),
			  .m_axi_quad_spi_0_lite_addr_range(),
			  .m_axi_quad_spi_1_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_gpio_1_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 !=
	     4'd15 &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     cache_masterPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // rule RL_cache_rl_count_miss_lat
  assign CAN_FIRE_RL_cache_rl_count_miss_lat =
	     !cache_f_reset_reqs$EMPTY_N &&
	     (cache_rg_state == 4'd8 || cache_rg_cache_rereq_data) ;
  assign WILL_FIRE_RL_cache_rl_count_miss_lat =
	     CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!cache_soc_map$m_is_mem_addr || cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010 ||
	      IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d424) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_8 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_8 ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_6 ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     MUX_cache_rg_state$write_1__SEL_4 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     MUX_cache_rg_state$write_1__SEL_4 ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_2 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_2 ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     cache_masterPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     cache_masterPortShim_bff$EMPTY_N ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_rg_cset_in_cache != 7'd127 ||
	      cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req =
	     EN_req && EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req = CAN_FIRE_RL_cache_do_req ;

  // rule RL_cache_do_set_req_valid
  assign CAN_FIRE_RL_cache_do_set_req_valid = 1'd1 ;
  assign WILL_FIRE_RL_cache_do_set_req_valid = 1'd1 ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule RL_cache_aw_events_update_reg
  assign CAN_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;
  assign WILL_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d469 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_dw_valid$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1044 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (IF_cache_w_req_width_code_whas__569_THEN_cache_ETC___d1664 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d811 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__569_THEN_c_ETC___d1648 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__PSEL_2 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     cache_masterPortShim_rff_i_notEmpty__139_AND_N_ETC___d1386 &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd15 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d766 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ;
  assign MUX_cache_rg_lower_word64$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (!cache_masterPortShim_rff$D_OUT[1] ||
	      cache_rg_lower_word64_full) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d464 ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign MUX_cache_rg_state$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_4 =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 != 5'b00010 &&
	     cache_rg_amo_funct5 != 5'b00011 ;
  assign MUX_cache_rg_state$write_1__SEL_5 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00011 ;
  assign MUX_cache_rg_state$write_1__SEL_6 =
	     cache_f_fabric_write_reqs$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_8 =
	     cache_masterPortShim_arff$FULL_N &&
	     NOT_cache_f_reset_reqs_notEmpty__49_27_AND_cac_ETC___d1216 &&
	     cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 ==
	     4'd0 ;
  assign MUX_cache_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_outrg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       { cache_rg_width_code != 3'd0 && cache_rg_width_code != 3'd1 &&
		 cache_rg_width_code != 3'b010 &&
		 IF_cache_rg_width_code_71_EQ_0b11_80_THEN_IF_c_ETC___d555,
		 x__h20595 } :
	       { 65'd0, _theResult___snd_fst__h26074 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       { 65'd0, _theResult___snd_fst__h36221 } :
	       { 1'd0, x__h33182 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 = { 1'd0, x__h41079 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_4 =
	     { cache_rg_allow_cap && cache_rg_ld_val[128],
	       cache_rg_ld_val[127:0] } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       { _0__q77[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q78[0]],
		 128'd0 } :
	       129'd0 ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 =
	     { cache_rg_width_code,
	       cache_rg_addr,
	       IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1046 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 =
	     { cache_rg_width_code,
	       cache_rg_pa,
	       cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
	       x__h38910 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_3 =
	     { cache_rg_width_code, cache_rg_pa, cache_rg_st_amo_val } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_1 =
	     { 4'd0, cline_fabric_addr__h31927, 29'd7143424 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_2 =
	     { 4'd0,
	       fabric_addr__h37986,
	       _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 ?
		 { 8'd0, size_val__h38221, 18'd65536 } :
		 29'd2949120 } ;
  assign MUX_cache_masterPortShim_arff$enq_1__VAL_3 =
	     { 4'd0,
	       fabric_addr__h37986,
	       _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 ?
		 8'd0 :
		 8'd1,
	       size_val__h38221,
	       18'd65536 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 =
	     { 1'd0, 22'bxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     { x__h26839,
	       IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1038 } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 = { x__h33177, x__h33182 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:5], 1'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 7'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_4 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_5 =
	     EN_commit ? cache_rg_exc_code : 6'd28 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_1 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       { 128'd0, lrsc_result__h22613 } :
	       { cache_rg_width_code == 3'b011 &&
		 IF_cache_rg_width_code_71_EQ_0b11_80_THEN_IF_c_ETC___d555,
		 x__h31266 } ;
  assign MUX_cache_rg_lower_word64_full$write_1__VAL_2 =
	     !cache_rg_lower_word64_full &&
	     !cache_masterPortShim_rff$D_OUT[1] ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 =
	     { cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
	       IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968 } ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     (NOT_IF_cache_w_req_width_code_whas__569_THEN_c_ETC___d1648 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_3 =
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ? 4'd14 : 4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       ((cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
		  4'd14 :
		  4'd4) :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_11 =
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_13 =
	     EN_commit ?
	       (cache_soc_map$m_is_mem_addr ?
		  IF_cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_ETC___d1104 :
		  4'd12) :
	       4'd4 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_dw_valid$wget =
	     !MUX_cache_dw_output_ld_val$wset_1__SEL_1 || EN_commit ;
  assign cache_dw_valid$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d469 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_valid$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_valid$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_4;
      default: cache_dw_output_ld_val$wget =
		   129'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_ld_val$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d469 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_1 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_dw_output_st_amo_val$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d469 ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_aw_events_wires_ifc_ifc_wires_1$wget =
	     { 1'd0,
	       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1112,
	       5'd0,
	       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1115,
	       6'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_3$wget =
	     { 2'd0, cache_rg_op == 2'd0, 5'd0, cache_rg_op == 2'd2, 5'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_4$wget =
	     { 13'd0, cache_ram_state_and_ctag_cset$DOB[22] } ;
  assign cache_aw_events_wires_ifc_ifc_wires_6$wget =
	     { req_op == 2'd0,
	       2'd0,
	       req_op == 2'd1,
	       2'd0,
	       req_op == 2'd2,
	       7'd0 } ;

  // register cache_aw_events_register
  assign cache_aw_events_register$D_IN =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[13]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[13]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[13]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[13]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d300 } ;
  assign cache_aw_events_register$EN = 1'd1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_inrg
  assign cache_ctr_wr_rsps_pending_inrg$D_IN =
	     cache_ctr_wr_rsps_pending_inrg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_inrg$EN =
	     cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 !=
	     4'd15 &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     cache_masterPortShim_wff$FULL_N ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     cache_masterPortShim_bff$EMPTY_N ?
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 :
	       cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_masterPortShim_bff$EMPTY_N ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_allow_cap
  assign cache_rg_allow_cap$D_IN = 1'd1 ;
  assign cache_rg_allow_cap$EN = CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_amo_funct5
  assign cache_rg_amo_funct5$D_IN = req_amo_funct5 ;
  assign cache_rg_amo_funct5$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_cache_rereq_data
  assign cache_rg_cache_rereq_data$D_IN = cache_rg_state != 4'd3 ;
  assign cache_rg_cache_rereq_data$EN = CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_exc_code$write_1__SEL_4 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_exc_code$write_1__VAL_5)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_4:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_5;
    default: cache_rg_exc_code$D_IN = 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__569_THEN_c_ETC___d1648 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_rg_ld_val$write_1__SEL_1 or
	  MUX_cache_rg_ld_val$write_1__VAL_1 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_valid$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_ld_val$write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_1;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_valid$wset_1__SEL_3:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d766 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_tag
  assign cache_rg_lower_tag$D_IN = cache_masterPortShim_rff$D_OUT[0] ;
  assign cache_rg_lower_tag$EN = MUX_cache_rg_lower_word64$write_1__SEL_2 ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = cache_masterPortShim_rff$D_OUT[67:4] ;
  assign cache_rg_lower_word64$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     !cache_masterPortShim_rff$D_OUT[1] ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     !cache_rg_lower_word64_full &&
	     !cache_masterPortShim_rff$D_OUT[1] ;

  // register cache_rg_lower_word64_full
  always@(MUX_cache_rg_lower_word64_full$write_1__SEL_1 or
	  cache_masterPortShim_rff$D_OUT or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_2 or
	  MUX_cache_rg_lower_word64_full$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop or
	  cache_rg_lower_word64_full or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_lower_word64_full$write_1__SEL_1:
	  cache_rg_lower_word64_full$D_IN =
	      !cache_masterPortShim_rff$D_OUT[1];
      MUX_cache_rg_lower_word64_full$write_1__SEL_2:
	  cache_rg_lower_word64_full$D_IN =
	      MUX_cache_rg_lower_word64_full$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop:
	  cache_rg_lower_word64_full$D_IN = !cache_rg_lower_word64_full;
      MUX_cache_rg_lower_word64_full$write_1__SEL_4:
	  cache_rg_lower_word64_full$D_IN = 1'd0;
      default: cache_rg_lower_word64_full$D_IN =
		   1'bx /* unspecified value */ ;
    endcase
  end
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (!cache_masterPortShim_rff$D_OUT[1] ||
	      cache_rg_lower_word64_full) ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d466 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d464 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_mem_req_sent
  assign cache_rg_mem_req_sent$D_IN = EN_req ;
  assign cache_rg_mem_req_sent$EN = 1'd1 ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     WILL_FIRE_RL_cache_do_req ?
	       req_st_value :
	       MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1098 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__SEL_3 or
	  MUX_cache_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_rg_state$write_1__SEL_7 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_11 or
	  MUX_cache_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_13)
  case (1'b1)
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    MUX_cache_rg_state$write_1__SEL_2: cache_rg_state$D_IN = 4'd2;
    MUX_cache_rg_state$write_1__SEL_3:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    MUX_cache_rg_state$write_1__SEL_7:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_11:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_13;
    default: cache_rg_state$D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset &&
	     cache_rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_tlb_walk
  assign cache_rg_tlb_walk$D_IN = 1'b0 ;
  assign cache_rg_tlb_walk$EN = 1'b0 ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_fabric_write_reqs
  always@(MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_cache_dw_valid$wset_1__SEL_3 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_f_fabric_write_reqs$enq_1__SEL_1:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_cache_dw_valid$wset_1__SEL_3:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
      default: cache_f_fabric_write_reqs$D_IN =
		   164'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1044 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  assign cache_f_fabric_write_reqs$DEQ =
	     cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 !=
	     4'd15 &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     cache_masterPortShim_wff$FULL_N ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_2 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_2 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_masterPortShim_arff
  always@(WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  MUX_cache_masterPortShim_arff$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_read_req:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_AMO_op_req:
	  cache_masterPortShim_arff$D_IN =
	      MUX_cache_masterPortShim_arff$enq_1__VAL_3;
      default: cache_masterPortShim_arff$D_IN =
		   97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_masterPortShim_arff$ENQ =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;
  assign cache_masterPortShim_arff$DEQ = EN_mem_master_ar_drop ;
  assign cache_masterPortShim_arff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_awff
  assign cache_masterPortShim_awff$D_IN =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h4791,
	       8'd0,
	       _theResult___snd_fst_val__h4897,
	       18'd65536 } ;
  assign cache_masterPortShim_awff$ENQ =
	     cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 !=
	     4'd15 &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     cache_masterPortShim_wff$FULL_N ;
  assign cache_masterPortShim_awff$DEQ = EN_mem_master_aw_drop ;
  assign cache_masterPortShim_awff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_bff
  assign cache_masterPortShim_bff$D_IN = mem_master_b_put_val ;
  assign cache_masterPortShim_bff$ENQ = EN_mem_master_b_put ;
  assign cache_masterPortShim_bff$DEQ = cache_masterPortShim_bff$EMPTY_N ;
  assign cache_masterPortShim_bff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_rff
  assign cache_masterPortShim_rff$D_IN = mem_master_r_put_val ;
  assign cache_masterPortShim_rff$ENQ = EN_mem_master_r_put ;
  assign cache_masterPortShim_rff$DEQ =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_masterPortShim_rff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_wff
  assign cache_masterPortShim_wff$D_IN =
	     { mem_req_wr_data_wdata__h4941,
	       mem_req_wr_data_wstrb__h4942,
	       1'd1,
	       mem_req_wr_data_wuser__h4944 } ;
  assign cache_masterPortShim_wff$ENQ =
	     cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 !=
	     4'd15 &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     cache_masterPortShim_awff$FULL_N &&
	     cache_masterPortShim_wff$FULL_N ;
  assign cache_masterPortShim_wff$DEQ = EN_mem_master_w_drop ;
  assign cache_masterPortShim_wff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:5] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       cache_rg_addr[11:5] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'bxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  :
	       23'bxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_addr[11:4] :
	       cache_rg_word128_set_in_cache ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d811 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache__ETC___d1101 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401) ?
	       4'd11 :
	       cache_rg_state ;
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q78 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_ETC___d1104 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       ((cache_ram_state_and_ctag_cset$DOB[22] &&
		 cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) ?
		  cache_rg_state :
		  4'd8) :
	       IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1103 ;
  assign IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1038 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       x__h23083 :
	       x__h27006 ;
  assign IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1046 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       cache_rg_st_amo_val :
	       { cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
		 IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968 } ;
  assign IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d1103 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       IF_NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache__ETC___d1101 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_ETC___d424 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d412 :
	       !cache_ram_state_and_ctag_cset$DOB[22] ||
	       !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 ||
	       !EN_commit ||
	       cache_f_fabric_write_reqs$FULL_N ;
  assign IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933 =
	     (cache_rg_width_code == 3'b010) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q58[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q58 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_71_EQ_0b11_80_THEN_IF_c_ETC___d555 =
	     (cache_rg_width_code == 3'b011) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[128] ;
  assign IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968 =
	     (cache_rg_width_code == 3'b011) ?
	       cache_rg_st_amo_val[127:0] :
	       new_st_val_128__h27097 ;
  assign IF_cache_w_req_width_code_whas__569_THEN_cache_ETC___d1664 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign IF_cache_w_req_width_code_whas__569_THEN_cache_ETC___d1669 =
	     (IF_cache_w_req_width_code_whas__569_THEN_cache_ETC___d1664 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign NOT_IF_cache_w_req_width_code_whas__569_THEN_c_ETC___d1648 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_f_reset_reqs_notEmpty__49_27_AND_cac_ETC___d1216 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d443 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 &&
	     cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441 ;
  assign NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1065 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1063 ;
  assign NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1076 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1074 ;
  assign NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1086 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 ||
	      !EN_commit) &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	     EN_commit &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign NOT_cache_rg_op_87_EQ_1_94_54_AND_NOT_cache_rg_ETC___d808 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	     EN_commit ;
  assign NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1040 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401) &&
	     EN_commit ;
  assign NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1063 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401) &&
	     EN_commit &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1069 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401) &&
	     EN_commit &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1074 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401) &&
	     EN_commit &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d806 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401) &&
	     EN_commit &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d566 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q44[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q44 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d571 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q49[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q49 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d576 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q41[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q41 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d581 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q50[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q50 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d586 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q40[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q40 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d591 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q51[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q51 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d596 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q38[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q38 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d601 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q52[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q52 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d605 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q36[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q36 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d610 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q53[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q53 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d615 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q34[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q34 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d620 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q55[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q55 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d625 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q32[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q32 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d630 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q54[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q54 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d635 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q30[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q30 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d640 =
	     { {56{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q56[7]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q56 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d660 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q43[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q43 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d664 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q42[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q42 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d668 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q39[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q39 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d672 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q37[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q37 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d676 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q35[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q35 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d680 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q33[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q33 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d684 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q31[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q31 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d688 =
	     { {48{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q29[15]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q29 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d700 =
	     { {32{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q48[31]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q48 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d704 =
	     { {32{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q47[31]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q47 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d708 =
	     { {32{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q46[31]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q46 } ;
  assign SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d712 =
	     { {32{cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q45[31]}},
	       cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q45 } ;
  assign _0__q77 = 2'd0 ;
  assign _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 =
	     8'd1 << size_val__h38221 <= 8'd8 ;
  assign _theResult___snd__h36168 =
	     (cache_rg_addr[2:0] == 3'd0) ?
	       cache_masterPortShim_rff$D_OUT[67:4] :
	       64'd0 ;
  assign access_exc_code__h4579 = MUX_cache_rg_exc_code$write_1__VAL_4 ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d295 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[2]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[2]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[2]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[2]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[1]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[1]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[1]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[1]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[0]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[0]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[0]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[0]) } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d296 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[4]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[4]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[4]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[4]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[3]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[3]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[3]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[3]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d295 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d297 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[6]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[6]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[6]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[6]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[5]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[5]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[5]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[5]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d296 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d298 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[8]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[8]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[8]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[8]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[7]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[7]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[7]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[7]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d297 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d299 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[10]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[10]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[10]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[10]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[9]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[9]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[9]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[9]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d298 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d300 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[12]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[12]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[12]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[12]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[11]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[11]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[11]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[11]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d299 } ;
  assign cache_cfg_verbosity_read__45_ULE_1___d346 =
	     cache_cfg_verbosity <= 4'd1 ;
  assign cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 =
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ;
  assign cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1 =
	     cache_masterPortShim_rff$D_OUT[11:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4 =
	     cache_masterPortShim_rff$D_OUT[19:12] ;
  assign cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2 =
	     cache_masterPortShim_rff$D_OUT[19:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5 =
	     cache_masterPortShim_rff$D_OUT[27:20] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6 =
	     cache_masterPortShim_rff$D_OUT[35:20] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7 =
	     cache_masterPortShim_rff$D_OUT[35:28] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3 =
	     cache_masterPortShim_rff$D_OUT[35:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8 =
	     cache_masterPortShim_rff$D_OUT[43:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9 =
	     cache_masterPortShim_rff$D_OUT[51:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q10 =
	     cache_masterPortShim_rff$D_OUT[51:44] ;
  assign cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12 =
	     cache_masterPortShim_rff$D_OUT[59:52] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q11 =
	     cache_masterPortShim_rff$D_OUT[67:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13 =
	     cache_masterPortShim_rff$D_OUT[67:52] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14 =
	     cache_masterPortShim_rff$D_OUT[67:60] ;
  assign cache_masterPortShim_rff_i_notEmpty__139_AND_N_ETC___d1386 =
	     cache_masterPortShim_rff$EMPTY_N &&
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      !cache_rg_lower_word64_full &&
	      !cache_masterPortShim_rff$D_OUT[1] ||
	      cache_f_fabric_write_reqs$FULL_N) ;
  assign cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7039 ;
  assign cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d1093 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	     EN_commit &&
	     cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441 &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d444 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d443 ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547 =
	     cache_ram_word128_set$DOB & y__h7741 ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q29 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:112] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q30 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[119:112] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q31 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[111:96] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q32 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[103:96] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[95:80] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[87:80] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[79:64] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[71:64] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:48] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[55:48] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[47:32] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[39:32] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[23:16] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[31:16] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q43 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[15:0] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q44 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[7:0] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q45 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:96] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q46 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[95:64] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q47 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:32] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q48 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[31:0] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q49 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[15:8] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q50 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[31:24] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q51 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[47:40] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q52 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:56] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q53 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[79:72] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q54 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[111:104] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q55 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[95:88] ;
  assign cache_ram_word128_set_b_read__38_AND_cache_ram_ETC__q56 =
	     cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:120] ;
  assign cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct5_90_EQ_0b10_91_AND_NOT_cach_ETC___d760 =
	     cache_rg_amo_funct5 == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) &&
	     cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441 &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d464 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d444 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d462 ;
  assign cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d466 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 ;
  assign cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d469 =
	     cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d466 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h22613 ;
  assign cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d743 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d756 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d1042 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1040 ||
	     NOT_cache_rg_op_87_EQ_1_94_54_AND_NOT_cache_rg_ETC___d808 ;
  assign cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d462 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 ||
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	     EN_commit &&
	     cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441 ;
  assign cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d809 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d806 ||
	     NOT_cache_rg_op_87_EQ_1_94_54_AND_NOT_cache_rg_ETC___d808 ;
  assign cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d1080 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h22613 &&
	     !cache_cfg_verbosity_read__45_ULE_1___d346 ;
  assign cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d412 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h22613 ||
	     !EN_commit ||
	     cache_f_fabric_write_reqs$FULL_N ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q58 = cache_rg_st_amo_val[31:0] ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1044 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d1042 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1098 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     NOT_cache_rg_op_87_EQ_1_94_54_AND_NOT_cache_rg_ETC___d808 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1112 =
	     cache_soc_map$m_is_mem_addr && cache_rg_mem_req_sent &&
	     cache_rg_op == 2'd0 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d1115 =
	     cache_soc_map$m_is_mem_addr && cache_rg_mem_req_sent &&
	     cache_rg_op == 2'd2 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d766 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	      EN_commit) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d811 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_87_EQ_1_94_OR_cache_rg_op_87_EQ_2__ETC___d809 ;
  assign cline_addr__h31926 = { cache_rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h31927 = { 32'd0, cline_addr__h31926 } ;
  assign fabric_addr__h37986 = { 32'd0, cache_rg_pa } ;
  assign lrsc_result__h22613 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401 ;
  assign mem_req_wr_addr_awaddr__h4791 =
	     { 32'd0, cache_f_fabric_write_reqs$D_OUT[160:129] } ;
  assign mem_req_wr_data_wuser__h4944 =
	     cache_f_fabric_write_reqs$D_OUT[163:161] == 3'b011 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign new_st_val_128__h27097 = { 64'd0, x__h27100 } ;
  assign new_st_val_128__h38916 = { 64'd0, x__h38919 } ;
  assign new_st_val_64__h27102 = { 32'd0, _theResult_____2__h27096[31:0] } ;
  assign new_st_val_64__h27174 =
	     IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 +
	     IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933 ;
  assign new_st_val_64__h28371 = w1__h26926 ^ w2__h26928 ;
  assign new_st_val_64__h28375 = w1__h26926 & w2__h26928 ;
  assign new_st_val_64__h28379 = w1__h26926 | w2__h26928 ;
  assign new_st_val_64__h28383 =
	     (w1__h26926 < w2__h26928) ? w1__h26926 : w2__h26928 ;
  assign new_st_val_64__h28388 =
	     (w1__h26926 <= w2__h26928) ? w2__h26928 : w1__h26926 ;
  assign new_st_val_64__h28394 =
	     ((IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933 ^
	       64'h8000000000000000)) ?
	       w1__h26926 :
	       w2__h26928 ;
  assign new_st_val_64__h28399 =
	     ((IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933 ^
	       64'h8000000000000000)) ?
	       w2__h26928 :
	       w1__h26926 ;
  assign new_st_val_64__h38921 = { 32'd0, _theResult_____2__h38915[31:0] } ;
  assign new_st_val_64__h38993 =
	     IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 +
	     IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933 ;
  assign new_st_val_64__h40904 = w1__h38882 ^ w2__h26928 ;
  assign new_st_val_64__h40908 = w1__h38882 & w2__h26928 ;
  assign new_st_val_64__h40912 = w1__h38882 | w2__h26928 ;
  assign new_st_val_64__h40916 =
	     (w1__h38882 < w2__h26928) ? w1__h38882 : w2__h26928 ;
  assign new_st_val_64__h40921 =
	     (w1__h38882 <= w2__h26928) ? w2__h26928 : w1__h38882 ;
  assign new_st_val_64__h40927 =
	     ((IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933 ^
	       64'h8000000000000000)) ?
	       w1__h38882 :
	       w2__h26928 ;
  assign new_st_val_64__h40932 =
	     ((IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d933 ^
	       64'h8000000000000000)) ?
	       w2__h26928 :
	       w1__h38882 ;
  assign pa_ctag__h7039 = { 2'd0, cache_rg_addr[31:12] } ;
  assign result_hi9103_BITS_15_TO_0__q16 = result_hi__h39103[15:0] ;
  assign result_hi9103_BITS_15_TO_8__q18 = result_hi__h39103[15:8] ;
  assign result_hi9103_BITS_23_TO_16__q19 = result_hi__h39103[23:16] ;
  assign result_hi9103_BITS_31_TO_0__q17 = result_hi__h39103[31:0] ;
  assign result_hi9103_BITS_31_TO_16__q20 = result_hi__h39103[31:16] ;
  assign result_hi9103_BITS_31_TO_24__q21 = result_hi__h39103[31:24] ;
  assign result_hi9103_BITS_39_TO_32__q23 = result_hi__h39103[39:32] ;
  assign result_hi9103_BITS_47_TO_32__q24 = result_hi__h39103[47:32] ;
  assign result_hi9103_BITS_47_TO_40__q25 = result_hi__h39103[47:40] ;
  assign result_hi9103_BITS_55_TO_48__q26 = result_hi__h39103[55:48] ;
  assign result_hi9103_BITS_63_TO_32__q22 = result_hi__h39103[63:32] ;
  assign result_hi9103_BITS_63_TO_48__q27 = result_hi__h39103[63:48] ;
  assign result_hi9103_BITS_63_TO_56__q28 = result_hi__h39103[63:56] ;
  assign result_hi9103_BITS_7_TO_0__q15 = result_hi__h39103[7:0] ;
  assign result_hi__h39103 =
	     cache_rg_lower_word64_full ?
	       cache_masterPortShim_rff$D_OUT[67:4] :
	       64'd0 ;
  assign result_lo9102_BITS_15_TO_0__q63 = result_lo__h39102[15:0] ;
  assign result_lo9102_BITS_15_TO_8__q65 = result_lo__h39102[15:8] ;
  assign result_lo9102_BITS_23_TO_16__q66 = result_lo__h39102[23:16] ;
  assign result_lo9102_BITS_31_TO_0__q64 = result_lo__h39102[31:0] ;
  assign result_lo9102_BITS_31_TO_16__q67 = result_lo__h39102[31:16] ;
  assign result_lo9102_BITS_31_TO_24__q68 = result_lo__h39102[31:24] ;
  assign result_lo9102_BITS_39_TO_32__q69 = result_lo__h39102[39:32] ;
  assign result_lo9102_BITS_47_TO_32__q70 = result_lo__h39102[47:32] ;
  assign result_lo9102_BITS_47_TO_40__q73 = result_lo__h39102[47:40] ;
  assign result_lo9102_BITS_55_TO_48__q72 = result_lo__h39102[55:48] ;
  assign result_lo9102_BITS_63_TO_32__q71 = result_lo__h39102[63:32] ;
  assign result_lo9102_BITS_63_TO_48__q74 = result_lo__h39102[63:48] ;
  assign result_lo9102_BITS_63_TO_56__q75 = result_lo__h39102[63:56] ;
  assign result_lo9102_BITS_7_TO_0__q62 = result_lo__h39102[7:0] ;
  assign result_lo__h20634 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[7:0] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d566 ;
  assign result_lo__h20669 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[15:8] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d571 ;
  assign result_lo__h20702 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[23:16] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d576 ;
  assign result_lo__h20735 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[31:24] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d581 ;
  assign result_lo__h20768 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[39:32] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d586 ;
  assign result_lo__h20801 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[47:40] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d591 ;
  assign result_lo__h20834 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[55:48] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d596 ;
  assign result_lo__h20867 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:56] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d601 ;
  assign result_lo__h20900 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[71:64] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d605 ;
  assign result_lo__h20933 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[79:72] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d610 ;
  assign result_lo__h20966 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[87:80] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d615 ;
  assign result_lo__h20999 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[95:88] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d620 ;
  assign result_lo__h21032 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[103:96] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d625 ;
  assign result_lo__h21065 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[111:104] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d630 ;
  assign result_lo__h21098 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[119:112] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d635 ;
  assign result_lo__h21131 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:120] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d640 ;
  assign result_lo__h21186 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[15:0] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d660 ;
  assign result_lo__h21219 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[31:16] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d664 ;
  assign result_lo__h21252 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[47:32] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d668 ;
  assign result_lo__h21285 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:48] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d672 ;
  assign result_lo__h21318 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[79:64] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d676 ;
  assign result_lo__h21351 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[95:80] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d680 ;
  assign result_lo__h21384 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[111:96] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d684 ;
  assign result_lo__h21417 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:112] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d688 ;
  assign result_lo__h21464 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[31:0] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d700 ;
  assign result_lo__h21497 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:32] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d704 ;
  assign result_lo__h21530 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[95:64] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d708 ;
  assign result_lo__h21563 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:96] } :
	       SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d712 ;
  assign result_lo__h36258 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[11:4] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1 } ;
  assign result_lo__h36291 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[19:12] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4 } ;
  assign result_lo__h36324 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[27:20] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5 } ;
  assign result_lo__h36357 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[35:28] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7 } ;
  assign result_lo__h36390 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[43:36] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8 } ;
  assign result_lo__h36423 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[51:44] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q10[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q10 } ;
  assign result_lo__h36456 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[59:52] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12 } ;
  assign result_lo__h36489 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[67:60] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14 } ;
  assign result_lo__h36552 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[19:4] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2 } ;
  assign result_lo__h36585 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[35:20] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6 } ;
  assign result_lo__h36618 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[51:36] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9 } ;
  assign result_lo__h36651 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[67:52] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13 } ;
  assign result_lo__h36702 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_masterPortShim_rff$D_OUT[35:4] } :
	       { {32{cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3[31]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3 } ;
  assign result_lo__h36735 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_masterPortShim_rff$D_OUT[67:36] } :
	       { {32{cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q11[31]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q11 } ;
  assign result_lo__h39102 =
	     cache_rg_lower_word64_full ?
	       cache_rg_lower_word64 :
	       _theResult___snd_fst__h36221 ;
  assign result_lo__h39870 =
	     { {56{result_lo9102_BITS_7_TO_0__q62[7]}},
	       result_lo9102_BITS_7_TO_0__q62 } ;
  assign result_lo__h39901 =
	     { {56{result_lo9102_BITS_15_TO_8__q65[7]}},
	       result_lo9102_BITS_15_TO_8__q65 } ;
  assign result_lo__h39932 =
	     { {56{result_lo9102_BITS_23_TO_16__q66[7]}},
	       result_lo9102_BITS_23_TO_16__q66 } ;
  assign result_lo__h39963 =
	     { {56{result_lo9102_BITS_31_TO_24__q68[7]}},
	       result_lo9102_BITS_31_TO_24__q68 } ;
  assign result_lo__h39994 =
	     { {56{result_lo9102_BITS_39_TO_32__q69[7]}},
	       result_lo9102_BITS_39_TO_32__q69 } ;
  assign result_lo__h40025 =
	     { {56{result_lo9102_BITS_47_TO_40__q73[7]}},
	       result_lo9102_BITS_47_TO_40__q73 } ;
  assign result_lo__h40056 =
	     { {56{result_lo9102_BITS_55_TO_48__q72[7]}},
	       result_lo9102_BITS_55_TO_48__q72 } ;
  assign result_lo__h40087 =
	     { {56{result_lo9102_BITS_63_TO_56__q75[7]}},
	       result_lo9102_BITS_63_TO_56__q75 } ;
  assign result_lo__h40118 =
	     { {56{result_hi9103_BITS_7_TO_0__q15[7]}},
	       result_hi9103_BITS_7_TO_0__q15 } ;
  assign result_lo__h40149 =
	     { {56{result_hi9103_BITS_15_TO_8__q18[7]}},
	       result_hi9103_BITS_15_TO_8__q18 } ;
  assign result_lo__h40180 =
	     { {56{result_hi9103_BITS_23_TO_16__q19[7]}},
	       result_hi9103_BITS_23_TO_16__q19 } ;
  assign result_lo__h40211 =
	     { {56{result_hi9103_BITS_31_TO_24__q21[7]}},
	       result_hi9103_BITS_31_TO_24__q21 } ;
  assign result_lo__h40242 =
	     { {56{result_hi9103_BITS_39_TO_32__q23[7]}},
	       result_hi9103_BITS_39_TO_32__q23 } ;
  assign result_lo__h40273 =
	     { {56{result_hi9103_BITS_47_TO_40__q25[7]}},
	       result_hi9103_BITS_47_TO_40__q25 } ;
  assign result_lo__h40304 =
	     { {56{result_hi9103_BITS_55_TO_48__q26[7]}},
	       result_hi9103_BITS_55_TO_48__q26 } ;
  assign result_lo__h40335 =
	     { {56{result_hi9103_BITS_63_TO_56__q28[7]}},
	       result_hi9103_BITS_63_TO_56__q28 } ;
  assign result_lo__h40388 =
	     { {48{result_lo9102_BITS_15_TO_0__q63[15]}},
	       result_lo9102_BITS_15_TO_0__q63 } ;
  assign result_lo__h40419 =
	     { {48{result_lo9102_BITS_31_TO_16__q67[15]}},
	       result_lo9102_BITS_31_TO_16__q67 } ;
  assign result_lo__h40450 =
	     { {48{result_lo9102_BITS_47_TO_32__q70[15]}},
	       result_lo9102_BITS_47_TO_32__q70 } ;
  assign result_lo__h40481 =
	     { {48{result_lo9102_BITS_63_TO_48__q74[15]}},
	       result_lo9102_BITS_63_TO_48__q74 } ;
  assign result_lo__h40512 =
	     { {48{result_hi9103_BITS_15_TO_0__q16[15]}},
	       result_hi9103_BITS_15_TO_0__q16 } ;
  assign result_lo__h40543 =
	     { {48{result_hi9103_BITS_31_TO_16__q20[15]}},
	       result_hi9103_BITS_31_TO_16__q20 } ;
  assign result_lo__h40574 =
	     { {48{result_hi9103_BITS_47_TO_32__q24[15]}},
	       result_hi9103_BITS_47_TO_32__q24 } ;
  assign result_lo__h40605 =
	     { {48{result_hi9103_BITS_63_TO_48__q27[15]}},
	       result_hi9103_BITS_63_TO_48__q27 } ;
  assign result_lo__h40650 =
	     { {32{result_lo9102_BITS_31_TO_0__q64[31]}},
	       result_lo9102_BITS_31_TO_0__q64 } ;
  assign result_lo__h40681 =
	     { {32{result_lo9102_BITS_63_TO_32__q71[31]}},
	       result_lo9102_BITS_63_TO_32__q71 } ;
  assign result_lo__h40712 =
	     { {32{result_hi9103_BITS_31_TO_0__q17[31]}},
	       result_hi9103_BITS_31_TO_0__q17 } ;
  assign result_lo__h40743 =
	     { {32{result_hi9103_BITS_63_TO_32__q22[31]}},
	       result_hi9103_BITS_63_TO_32__q22 } ;
  assign shift_bits__h4807 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe128__h4879 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h4883 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h4887 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h4891 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign w16921_BITS_31_TO_0__q57 = w1__h26921[31:0] ;
  assign w18877_BITS_31_TO_0__q76 = w1__h38877[31:0] ;
  assign w1___1__h27141 = { 32'd0, w1__h26921[31:0] } ;
  assign w1___1__h38960 = { 32'd0, w1__h38877[31:0] } ;
  assign w2__h26928 =
	     (cache_rg_width_code == 3'b010) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word64__h4878 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h4807 ;
  assign x__h20595 =
	     { _theResult___snd_snd__h20597, _theResult___snd_fst__h20596 } ;
  assign x__h26839 =
	     (cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h26880 :
	       cache_ram_word128_set$DOB[129:128] & y__h27004 ;
  assign x__h26880 = 2'd1 << x__h26983 ;
  assign x__h26983 = { 3'd0, cache_rg_addr[3] } ;
  assign x__h27100 =
	     (cache_rg_width_code == 3'b010) ?
	       new_st_val_64__h27102 :
	       _theResult_____2__h27096 ;
  assign x__h31266 = { _theResult___snd_snd__h20597, w1__h26921 } ;
  assign x__h33177 =
	     { cache_masterPortShim_rff$D_OUT[0], cache_rg_lower_tag } ;
  assign x__h33182 =
	     { cache_masterPortShim_rff$D_OUT[67:4], cache_rg_lower_word64 } ;
  assign x__h38910 =
	     (cache_rg_width_code == 3'b011) ?
	       cache_rg_st_amo_val[127:0] :
	       new_st_val_128__h38916 ;
  assign x__h38919 =
	     (cache_rg_width_code == 3'b010) ?
	       new_st_val_64__h38921 :
	       _theResult_____2__h38915 ;
  assign x__h41079 = { _theResult___snd_snd__h39098, w1__h38877 } ;
  assign y__h27004 = ~x__h26880 ;
  assign y__h7741 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011, 3'd4: _theResult___snd_fst__h26074 = 64'd1;
      default: _theResult___snd_fst__h26074 = 64'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0, 3'b001, 3'b010, 3'b011:
	  _theResult___snd_fst_val__h4897 =
	      cache_f_fabric_write_reqs$D_OUT[163:161];
      default: _theResult___snd_fst_val__h4897 = 3'b111;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h4878)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h4941 = word64__h4878;
      default: mem_req_wr_data_wdata__h4941 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011: size_val__h38221 = cache_rg_width_code;
      default: size_val__h38221 = 3'b100;
    endcase
  end
  always@(cache_rg_width_code or result_hi__h39103)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011: _theResult___snd_snd__h39098 = 64'd0;
      3'd4: _theResult___snd_snd__h39098 = result_hi__h39103;
      default: _theResult___snd_snd__h39098 = 64'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe128__h4879 or
	  strobe128__h4883 or strobe128__h4887 or strobe128__h4891)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0: mem_req_wr_data_wstrb__h4942 = strobe128__h4879;
      3'b001: mem_req_wr_data_wstrb__h4942 = strobe128__h4883;
      3'b010: mem_req_wr_data_wstrb__h4942 = strobe128__h4887;
      3'b011: mem_req_wr_data_wstrb__h4942 = strobe128__h4891;
      default: mem_req_wr_data_wstrb__h4942 = 8'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011: _theResult___snd_snd__h20597 = 64'd0;
      3'd4:
	  _theResult___snd_snd__h20597 =
	      cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:64];
      default: _theResult___snd_snd__h20597 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___snd__h7690 =
	      cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:0];
      4'h8:
	  _theResult___snd__h7690 =
	      cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[127:64];
      default: _theResult___snd__h7690 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h20634 or
	  result_lo__h20669 or
	  result_lo__h20702 or
	  result_lo__h20735 or
	  result_lo__h20768 or
	  result_lo__h20801 or
	  result_lo__h20834 or
	  result_lo__h20867 or
	  result_lo__h20900 or
	  result_lo__h20933 or
	  result_lo__h20966 or
	  result_lo__h20999 or
	  result_lo__h21032 or
	  result_lo__h21065 or result_lo__h21098 or result_lo__h21131)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20634;
      4'h1:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20669;
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20702;
      4'h3:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20735;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20768;
      4'h5:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20801;
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20834;
      4'h7:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20867;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20900;
      4'h9:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20933;
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20966;
      4'hB:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h20999;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h21032;
      4'hD:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h21065;
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h21098;
      4'hF:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 =
	      result_lo__h21131;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h21186 or
	  result_lo__h21219 or
	  result_lo__h21252 or
	  result_lo__h21285 or
	  result_lo__h21318 or
	  result_lo__h21351 or result_lo__h21384 or result_lo__h21417)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21186;
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21219;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21252;
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21285;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21318;
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21351;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21384;
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
	      result_lo__h21417;
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h21464 or
	  result_lo__h21497 or result_lo__h21530 or result_lo__h21563)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717 =
	      result_lo__h21464;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717 =
	      result_lo__h21497;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717 =
	      result_lo__h21530;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717 =
	      result_lo__h21563;
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717 or
	  _theResult___snd__h7690 or
	  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___snd_fst__h20596 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d657;
      3'd1:
	  _theResult___snd_fst__h20596 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d697;
      3'b010:
	  _theResult___snd_fst__h20596 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d717;
      3'b011: _theResult___snd_fst__h20596 = _theResult___snd__h7690;
      3'd4:
	  _theResult___snd_fst__h20596 =
	      cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:0];
      default: _theResult___snd_fst__h20596 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d700 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d704 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d708 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d712)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d700;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d704;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d708;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d712;
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d660 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d664 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d668 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d672 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d676 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d680 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d684 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d688)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d660;
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d664;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d668;
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d672;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d676;
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d680;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d684;
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d688;
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d566 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d571 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d576 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d581 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d586 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d591 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d596 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d601 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d605 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d610 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d615 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d620 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d625 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d630 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d635 or
	  SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d640)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d566;
      4'h1:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d571;
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d576;
      4'h3:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d581;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d586;
      4'h5:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d591;
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d596;
      4'h7:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d601;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d605;
      4'h9:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d610;
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d615;
      4'hB:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d620;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d625;
      4'hD:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d630;
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d635;
      4'hF:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 =
	      SEXT_cache_ram_word128_set_b_read__38_AND_cach_ETC___d640;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796 or
	  _theResult___snd__h7690 or
	  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h26921 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784;
      3'd1:
	  w1__h26921 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792;
      3'b010:
	  w1__h26921 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d796;
      3'b011: w1__h26921 = _theResult___snd__h7690;
      3'd4:
	  w1__h26921 =
	      cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:0];
      default: w1__h26921 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 or
	  w1___1__h27141 or
	  _theResult___snd__h7690 or
	  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h26926 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784;
      3'd1:
	  w1__h26926 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792;
      3'b010: w1__h26926 = w1___1__h27141;
      3'b011: w1__h26926 = _theResult___snd__h7690;
      3'd4:
	  w1__h26926 =
	      cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:0];
      default: w1__h26926 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792 or
	  w16921_BITS_31_TO_0__q57 or
	  _theResult___snd__h7690 or
	  cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547)
  begin
    case (cache_rg_width_code)
      3'd0:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d784;
      3'd1:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d792;
      3'b010:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 =
	      { {32{w16921_BITS_31_TO_0__q57[31]}},
		w16921_BITS_31_TO_0__q57 };
      3'b011:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 =
	      _theResult___snd__h7690;
      3'd4:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 =
	      cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547[63:0];
      default: IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d931 =
		   64'd0;
    endcase
  end
  always@(cache_rg_amo_funct5 or
	  new_st_val_64__h28399 or
	  new_st_val_64__h27174 or
	  w2__h26928 or
	  new_st_val_64__h28371 or
	  new_st_val_64__h28379 or
	  new_st_val_64__h28375 or
	  new_st_val_64__h28394 or
	  new_st_val_64__h28383 or new_st_val_64__h28388)
  begin
    case (cache_rg_amo_funct5)
      5'b0: _theResult_____2__h27096 = new_st_val_64__h27174;
      5'b00001: _theResult_____2__h27096 = w2__h26928;
      5'b00100: _theResult_____2__h27096 = new_st_val_64__h28371;
      5'b01000: _theResult_____2__h27096 = new_st_val_64__h28379;
      5'b01100: _theResult_____2__h27096 = new_st_val_64__h28375;
      5'b10000: _theResult_____2__h27096 = new_st_val_64__h28394;
      5'b11000: _theResult_____2__h27096 = new_st_val_64__h28383;
      5'b11100: _theResult_____2__h27096 = new_st_val_64__h28388;
      default: _theResult_____2__h27096 = new_st_val_64__h28399;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027 =
	      { cache_ram_word128_set$DOB[127:32],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[31:0] };
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027 =
	      { cache_ram_word128_set$DOB[127:96],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027 =
	      { IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[31:0],
		cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { cache_ram_word128_set$DOB[127:16],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0] };
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { cache_ram_word128_set$DOB[127:32],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { cache_ram_word128_set$DOB[127:48],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { cache_ram_word128_set$DOB[127:80],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { cache_ram_word128_set$DOB[127:96],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { cache_ram_word128_set$DOB[127:112],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
	      { IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[15:0],
		cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:8],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0] };
      4'h1:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:16],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:24],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:32],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:40],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:48],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:56],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:72],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:80],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:88],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:96],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:104],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:112],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { cache_ram_word128_set$DOB[127:120],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 =
	      { IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[7:0],
		cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q59 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q59 =
	      { IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968[63:0],
		cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q59 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q59 or
	  IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27006 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1001;
      3'd1:
	  x__h27006 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1018;
      3'b010:
	  x__h27006 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1027;
      3'b011:
	  x__h27006 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q59;
      3'd4:
	  x__h27006 =
	      IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968;
      default: x__h27006 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q60 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q60 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q60 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q60 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h23083 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d887;
      3'd1:
	  x__h23083 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d904;
      3'b010:
	  x__h23083 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d913;
      3'b011:
	  x__h23083 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q60;
      3'd4: x__h23083 = cache_rg_st_amo_val[127:0];
      default: x__h23083 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h36258 or
	  result_lo__h36291 or
	  result_lo__h36324 or
	  result_lo__h36357 or
	  result_lo__h36390 or
	  result_lo__h36423 or result_lo__h36456 or result_lo__h36489)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36258;
      3'd1:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36291;
      3'd2:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36324;
      3'd3:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36357;
      3'd4:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36390;
      3'd5:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36423;
      3'd6:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36456;
      3'd7:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 =
	      result_lo__h36489;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h36552 or
	  result_lo__h36585 or result_lo__h36618 or result_lo__h36651)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314 =
	      result_lo__h36552;
      3'd2:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314 =
	      result_lo__h36585;
      3'd4:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314 =
	      result_lo__h36618;
      3'd6:
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314 =
	      result_lo__h36651;
      default: IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result_lo__h36702 or result_lo__h36735)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6702_ETC__q61 =
	      result_lo__h36702;
      3'd4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6702_ETC__q61 =
	      result_lo__h36735;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6702_ETC__q61 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294 or
	  IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6702_ETC__q61 or
	  _theResult___snd__h36168 or cache_masterPortShim_rff$D_OUT)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___snd_fst__h36221 =
	      IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1294;
      3'd1:
	  _theResult___snd_fst__h36221 =
	      IF_cache_rg_addr_83_BITS_2_TO_0_246_EQ_0_247_T_ETC___d1314;
      3'b010:
	  _theResult___snd_fst__h36221 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6702_ETC__q61;
      3'b011: _theResult___snd_fst__h36221 = _theResult___snd__h36168;
      3'd4:
	  _theResult___snd_fst__h36221 = cache_masterPortShim_rff$D_OUT[67:4];
      default: _theResult___snd_fst__h36221 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or result_lo__h39102 or result_hi__h39103)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___snd__h40795 = result_lo__h39102;
      4'h8: _theResult___snd__h40795 = result_hi__h39103;
      default: _theResult___snd__h40795 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h40650 or
	  result_lo__h40681 or result_lo__h40712 or result_lo__h40743)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488 =
	      result_lo__h40650;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488 =
	      result_lo__h40681;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488 =
	      result_lo__h40712;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488 =
	      result_lo__h40743;
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h40388 or
	  result_lo__h40419 or
	  result_lo__h40450 or
	  result_lo__h40481 or
	  result_lo__h40512 or
	  result_lo__h40543 or result_lo__h40574 or result_lo__h40605)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40388;
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40419;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40450;
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40481;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40512;
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40543;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40574;
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
	      result_lo__h40605;
      default: IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h39870 or
	  result_lo__h39901 or
	  result_lo__h39932 or
	  result_lo__h39963 or
	  result_lo__h39994 or
	  result_lo__h40025 or
	  result_lo__h40056 or
	  result_lo__h40087 or
	  result_lo__h40118 or
	  result_lo__h40149 or
	  result_lo__h40180 or
	  result_lo__h40211 or
	  result_lo__h40242 or
	  result_lo__h40273 or result_lo__h40304 or result_lo__h40335)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h39870;
      4'h1:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h39901;
      4'h2:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h39932;
      4'h3:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h39963;
      4'h4:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h39994;
      4'h5:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40025;
      4'h6:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40056;
      4'h7:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40087;
      4'h8:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40118;
      4'h9:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40149;
      4'hA:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40180;
      4'hB:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40211;
      4'hC:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40242;
      4'hD:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40273;
      4'hE:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40304;
      4'hF:
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 =
	      result_lo__h40335;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488 or
	  _theResult___snd__h40795 or result_lo__h39102)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h38877 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452;
      3'd1:
	  w1__h38877 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476;
      3'b010:
	  w1__h38877 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1488;
      3'b011: w1__h38877 = _theResult___snd__h40795;
      3'd4: w1__h38877 = result_lo__h39102;
      default: w1__h38877 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 or
	  w1___1__h38960 or _theResult___snd__h40795 or result_lo__h39102)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h38882 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452;
      3'd1:
	  w1__h38882 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476;
      3'b010: w1__h38882 = w1___1__h38960;
      3'b011: w1__h38882 = _theResult___snd__h40795;
      3'd4: w1__h38882 = result_lo__h39102;
      default: w1__h38882 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452 or
	  IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476 or
	  w18877_BITS_31_TO_0__q76 or
	  _theResult___snd__h40795 or result_lo__h39102)
  begin
    case (cache_rg_width_code)
      3'd0:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1452;
      3'd1:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 =
	      IF_cache_rg_addr_83_BITS_3_TO_0_35_EQ_0x0_81_T_ETC___d1476;
      3'b010:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 =
	      { {32{w18877_BITS_31_TO_0__q76[31]}},
		w18877_BITS_31_TO_0__q76 };
      3'b011:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 =
	      _theResult___snd__h40795;
      3'd4:
	  IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 =
	      result_lo__h39102;
      default: IF_cache_rg_width_code_71_EQ_0b10_76_THEN_SEXT_ETC___d1498 =
		   64'd0;
    endcase
  end
  always@(cache_rg_amo_funct5 or
	  new_st_val_64__h40932 or
	  new_st_val_64__h38993 or
	  w2__h26928 or
	  new_st_val_64__h40904 or
	  new_st_val_64__h40912 or
	  new_st_val_64__h40908 or
	  new_st_val_64__h40927 or
	  new_st_val_64__h40916 or new_st_val_64__h40921)
  begin
    case (cache_rg_amo_funct5)
      5'b0: _theResult_____2__h38915 = new_st_val_64__h38993;
      5'b00001: _theResult_____2__h38915 = w2__h26928;
      5'b00100: _theResult_____2__h38915 = new_st_val_64__h40904;
      5'b01000: _theResult_____2__h38915 = new_st_val_64__h40912;
      5'b01100: _theResult_____2__h38915 = new_st_val_64__h40908;
      5'b10000: _theResult_____2__h38915 = new_st_val_64__h40927;
      5'b11000: _theResult_____2__h38915 = new_st_val_64__h40916;
      5'b11100: _theResult_____2__h38915 = new_st_val_64__h40921;
      default: _theResult_____2__h38915 = new_st_val_64__h40932;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY 14'd0;
	cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_aw_events_register$EN)
	  cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY
	      cache_aw_events_register$D_IN;
	if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_rg_cache_rereq_data$EN)
	  cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cache_rereq_data$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_ld_val$EN)
	  cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_mem_req_sent$EN)
	  cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_mem_req_sent$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_tlb_walk$EN)
	  cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY cache_rg_tlb_walk$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_allow_cap$EN)
      cache_rg_allow_cap <= `BSV_ASSIGNMENT_DELAY cache_rg_allow_cap$D_IN;
    if (cache_rg_amo_funct5$EN)
      cache_rg_amo_funct5 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct5$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_lower_tag$EN)
      cache_rg_lower_tag <= `BSV_ASSIGNMENT_DELAY cache_rg_lower_tag$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_aw_events_register = 14'h2AAA;
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_allow_cap = 1'h0;
    cache_rg_amo_funct5 = 5'h0A;
    cache_rg_cache_rereq_data = 1'h0;
    cache_rg_cset_in_cache = 7'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_tag = 1'h0;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_mem_req_sent = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_tlb_walk = 1'h0;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", mem_req_wr_addr_awaddr__h4791);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", _theResult___snd_fst_val__h4897, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", mem_req_wr_data_wdata__h4941);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", mem_req_wr_data_wstrb__h4942);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", mem_req_wr_data_wuser__h4944, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h6271 = $stime;
	  #0;
	end
    v__h6265 = v__h6271 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6265,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7039,
		 cache_rg_addr[11:5],
		 cache_rg_addr[4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 6'bxxxxxx /* unspecified value */ , " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d743)
	begin
	  v__h21776 = $stime;
	  #0;
	end
    v__h21770 = v__h21776 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d743)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21770,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00010 &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d419 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d743)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_87_EQ_0_88_OR_cache_rg_op_87_EQ_2__ETC___d756)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5_90_EQ_0b10_91_AND_NOT_cach_ETC___d760)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_83_EQ_cache_rg_lrsc_pa_00___d441 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  cache_rg_lrsc_valid &&
	  !cache_rg_lrsc_pa_00_EQ_cache_rg_addr_83___d401 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("        AMO SC result = %0d", lrsc_result__h22613);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1065)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1065)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1065)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1065)
	$write(" 0x%0x", { x__h26839, x__h23083 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1065)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	  NOT_cache_rg_op_87_EQ_2_89_47_OR_NOT_cache_rg__ETC___d1069)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1076)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1076)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d1080)
	begin
	  v__h26385 = $stime;
	  #0;
	end
    v__h26379 = v__h26385 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d1080)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h26379,
		 "D_MMU_Cache",
		 32'd0,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_87_EQ_2_89_AND_cache_rg_amo_funct5_ETC___d1080)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1086)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$display("        AMO: addr 0x%0h amo_f5 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct5,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547,
		 cache_ram_word128_set_b_read__38_AND_cache_ram_ETC___d547,
		 { cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
		   IF_cache_rg_width_code_71_EQ_0b11_80_THEN_cach_ETC___d968 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$write(" 0x%0x", { x__h26839, x__h27006 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_87_EQ_0_88_46_AND_NOT_cache_rg_ETC___d1090)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	  cache_rg_op != 2'd1 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	  cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d1093)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_soc_map$m_is_mem_addr &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h31878 = $stime;
	  #0;
	end
    v__h31872 = v__h31878 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_start_cache_refill: ", v__h31872, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cline_fabric_addr__h31927);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	begin
	  v__h32636 = $stime;
	  #0;
	end
    v__h32630 = v__h32636 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h32630,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h32914 = $stime;
	  #0;
	end
    v__h32908 = v__h32914 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h32908,
		 "D_MMU_Cache",
		 access_exc_code__h4579);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { x__h33177, x__h33182 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write(" 0x%0x", { x__h33177, x__h33182 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__45_ULE_2_144___d1145)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:5],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h5565 = $stime;
	  #0;
	end
    v__h5559 = v__h5565 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h5559,
		 "D_MMU_Cache",
		 $signed(32'd4),
		 $signed(32'd1),
		 $signed(32'd32),
		 $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h35362 = $stime;
	  #0;
	end
    v__h35356 = v__h35362 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h35356,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", fabric_addr__h37986);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", size_val__h38221, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", fabric_addr__h37986);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h35867 = $stime;
	  #0;
	end
    v__h35861 = v__h35867 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h35861,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h37094 = $stime;
	  #0;
	end
    v__h37088 = v__h37094 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h37088,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0, _theResult___snd_fst__h36221 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h37229 = $stime;
	  #0;
	end
    v__h37223 = v__h37229 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h37223,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h36924 = $stime;
	  #0;
	end
    v__h36918 = v__h36924 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36918,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h33182 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h37358 = $stime;
	  #0;
	end
    v__h37352 = v__h37358 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h37352,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h37468 = $stime;
	  #0;
	end
    v__h37462 = v__h37468 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h37462,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { cache_rg_allow_cap && cache_rg_ld_val[128],
		   cache_rg_ld_val[127:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h37558 = $stime;
	  #0;
	end
    v__h37552 = v__h37558 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37552,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h37794 = $stime;
	  #0;
	end
    v__h37788 = v__h37794 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37788,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h37938 = $stime;
	  #0;
	end
    v__h37932 = v__h37938 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h37932,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", fabric_addr__h37986);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", size_val__h38221, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", fabric_addr__h37986);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", size_val__h38221, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_71_EQ_0_72_OR_cach_ETC___d1224 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h38388 = $stime;
	  #0;
	end
    v__h38382 = v__h38388 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h38382,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h38792 = $stime;
	  #0;
	end
    v__h38786 = v__h38792 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h38786,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h41101 = $stime;
	  #0;
	end
    v__h41095 = v__h41101 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h41095,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h41079 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full || cache_masterPortShim_rff$D_OUT[1]) &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h38720 = $stime;
	  #0;
	end
    v__h38714 = v__h38720 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h38714,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	begin
	  v__h41343 = $stime;
	  #0;
	end
    v__h41337 = v__h41343 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$display("%0d: ERROR: %s.rl_discard_write_rsp: unexpected W response (ctr_wr_rsps_pending.value == 0)",
		 v__h41337,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd1 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	begin
	  v__h41571 = $stime;
	  #0;
	end
    v__h41565 = v__h41571 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$display("%0d: ERROR: CreditCounter: underflow", v__h41565);
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h41776 = $stime;
	  #0;
	end
    v__h41770 = v__h41776 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h41770,
	       "D_MMU_Cache",
	       $unsigned(cache_ctr_wr_rsps_pending_inrg_read__02_MINUS__ETC___d304));
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	begin
	  v__h41728 = $stime;
	  #0;
	end
    v__h41722 = v__h41728 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h41722,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", cache_masterPortShim_bff$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd1 &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (cache_masterPortShim_bff$EMPTY_N &&
	  cache_masterPortShim_bff$D_OUT[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h6048 = $stime;
	  #0;
	end
    v__h6042 = v__h6048 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h6042,
		 "D_MMU_Cache",
		 $signed(32'd128),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h6143 = $stime;
	  #0;
	end
    v__h6137 = v__h6143 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h6137, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	begin
	  v__h42685 = $stime;
	  #0;
	end
    v__h42679 = v__h42685 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("%0d: %m.req: op:", v__h42679);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__45_ULE_1___d346)
	$display("    amo_funct5 = 0x%0h", req_amo_funct5);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  IF_cache_w_req_width_code_whas__569_THEN_cache_ETC___d1669)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1997, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1996, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1995, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1994, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

