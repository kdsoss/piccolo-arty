//
// Generated by Bluespec Compiler, version untagged-gad02e931 (build ad02e931)
//
// On Fri Jul 23 15:58:08 EEST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1
// RDY_server_reset_response_get  O     1 reg
// imem_valid                     O     1
// imem_is_i32_not_i16            O     1 const
// imem_pc                        O    32 reg
// imem_instr                     O    32
// imem_exc                       O     1
// imem_exc_code                  O     6 reg
// imem_tval                      O    32 reg
// imem_events                    O    14 reg
// RDY_imem_events                O     1 const
// imem_master_aw_canPeek         O     1 reg
// imem_master_aw_peek            O    98 reg
// RDY_imem_master_aw_peek        O     1 reg
// RDY_imem_master_aw_drop        O     1 reg
// imem_master_w_canPeek          O     1 reg
// imem_master_w_peek             O    74 reg
// RDY_imem_master_w_peek         O     1 reg
// RDY_imem_master_w_drop         O     1 reg
// imem_master_b_canPut           O     1 reg
// RDY_imem_master_b_put          O     1 reg
// imem_master_ar_canPeek         O     1 reg
// imem_master_ar_peek            O    98 reg
// RDY_imem_master_ar_peek        O     1 reg
// RDY_imem_master_ar_drop        O     1 reg
// imem_master_r_canPut           O     1 reg
// RDY_imem_master_r_put          O     1 reg
// dmem_valid                     O     1
// dmem_word128_fst               O     1
// dmem_word128_snd               O   128
// dmem_st_amo_val                O   128
// dmem_exc                       O     1
// dmem_exc_code                  O     6 reg
// dmem_events                    O    14 reg
// RDY_dmem_events                O     1 const
// dmem_master_aw_canPeek         O     1 reg
// dmem_master_aw_peek            O    97 reg
// RDY_dmem_master_aw_peek        O     1 reg
// RDY_dmem_master_aw_drop        O     1 reg
// dmem_master_w_canPeek          O     1 reg
// dmem_master_w_peek             O    74 reg
// RDY_dmem_master_w_peek         O     1 reg
// RDY_dmem_master_w_drop         O     1 reg
// dmem_master_b_canPut           O     1 reg
// RDY_dmem_master_b_put          O     1 reg
// dmem_master_ar_canPeek         O     1 reg
// dmem_master_ar_peek            O    97 reg
// RDY_dmem_master_ar_peek        O     1 reg
// RDY_dmem_master_ar_drop        O     1 reg
// dmem_master_r_canPut           O     1 reg
// RDY_dmem_master_r_put          O     1 reg
// RDY_server_fence_i_request_put  O     1
// RDY_server_fence_i_response_get  O     1
// RDY_server_fence_request_put   O     1 reg
// RDY_server_fence_response_get  O     1
// RDY_sfence_vma                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_req_width_code            I     3
// imem_req_addr                  I    32
// imem_req_priv                  I     2 unused
// imem_req_sstatus_SUM           I     1 unused
// imem_req_mstatus_MXR           I     1 unused
// imem_req_satp                  I    32 unused
// imem_master_b_put_val          I     7 reg
// imem_master_r_put_val          I    73 reg
// dmem_req_op                    I     2
// dmem_req_width_code            I     3
// dmem_req_is_unsigned           I     1 reg
// dmem_req_amo_funct5            I     5 reg
// dmem_req_addr                  I    32
// dmem_req_store_value           I   129
// dmem_req_priv                  I     2 unused
// dmem_req_sstatus_SUM           I     1 unused
// dmem_req_mstatus_MXR           I     1 unused
// dmem_req_satp                  I    32 unused
// dmem_master_b_put_val          I     6 reg
// dmem_master_r_put_val          I    72 reg
// server_fence_request_put       I     8 unused
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_imem_req                    I     1
// EN_imem_commit                 I     1 unused
// EN_imem_master_aw_drop         I     1
// EN_imem_master_w_drop          I     1
// EN_imem_master_b_put           I     1
// EN_imem_master_ar_drop         I     1
// EN_imem_master_r_put           I     1
// EN_dmem_req                    I     1
// EN_dmem_commit                 I     1
// EN_dmem_master_aw_drop         I     1
// EN_dmem_master_w_drop          I     1
// EN_dmem_master_b_put           I     1
// EN_dmem_master_ar_drop         I     1
// EN_dmem_master_r_put           I     1
// EN_server_fence_i_request_put  I     1
// EN_server_fence_i_response_get  I     1
// EN_server_fence_request_put    I     1
// EN_server_fence_response_get   I     1
// EN_sfence_vma                  I     1 unused
//
// Combinational paths from inputs to outputs:
//   EN_imem_commit -> imem_valid
//   EN_dmem_commit -> dmem_valid
//   EN_dmem_commit -> dmem_word128_fst
//   EN_dmem_commit -> dmem_word128_snd
//   EN_dmem_commit -> dmem_st_amo_val
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNear_Mem(CLK,
		  RST_N,

		  EN_server_reset_request_put,
		  RDY_server_reset_request_put,

		  EN_server_reset_response_get,
		  RDY_server_reset_response_get,

		  imem_req_width_code,
		  imem_req_addr,
		  imem_req_priv,
		  imem_req_sstatus_SUM,
		  imem_req_mstatus_MXR,
		  imem_req_satp,
		  EN_imem_req,

		  EN_imem_commit,

		  imem_valid,

		  imem_is_i32_not_i16,

		  imem_pc,

		  imem_instr,

		  imem_exc,

		  imem_exc_code,

		  imem_tval,

		  imem_events,
		  RDY_imem_events,

		  imem_master_aw_canPeek,

		  imem_master_aw_peek,
		  RDY_imem_master_aw_peek,

		  EN_imem_master_aw_drop,
		  RDY_imem_master_aw_drop,

		  imem_master_w_canPeek,

		  imem_master_w_peek,
		  RDY_imem_master_w_peek,

		  EN_imem_master_w_drop,
		  RDY_imem_master_w_drop,

		  imem_master_b_canPut,

		  imem_master_b_put_val,
		  EN_imem_master_b_put,
		  RDY_imem_master_b_put,

		  imem_master_ar_canPeek,

		  imem_master_ar_peek,
		  RDY_imem_master_ar_peek,

		  EN_imem_master_ar_drop,
		  RDY_imem_master_ar_drop,

		  imem_master_r_canPut,

		  imem_master_r_put_val,
		  EN_imem_master_r_put,
		  RDY_imem_master_r_put,

		  dmem_req_op,
		  dmem_req_width_code,
		  dmem_req_is_unsigned,
		  dmem_req_amo_funct5,
		  dmem_req_addr,
		  dmem_req_store_value,
		  dmem_req_priv,
		  dmem_req_sstatus_SUM,
		  dmem_req_mstatus_MXR,
		  dmem_req_satp,
		  EN_dmem_req,

		  EN_dmem_commit,

		  dmem_valid,

		  dmem_word128_fst,

		  dmem_word128_snd,

		  dmem_st_amo_val,

		  dmem_exc,

		  dmem_exc_code,

		  dmem_events,
		  RDY_dmem_events,

		  dmem_master_aw_canPeek,

		  dmem_master_aw_peek,
		  RDY_dmem_master_aw_peek,

		  EN_dmem_master_aw_drop,
		  RDY_dmem_master_aw_drop,

		  dmem_master_w_canPeek,

		  dmem_master_w_peek,
		  RDY_dmem_master_w_peek,

		  EN_dmem_master_w_drop,
		  RDY_dmem_master_w_drop,

		  dmem_master_b_canPut,

		  dmem_master_b_put_val,
		  EN_dmem_master_b_put,
		  RDY_dmem_master_b_put,

		  dmem_master_ar_canPeek,

		  dmem_master_ar_peek,
		  RDY_dmem_master_ar_peek,

		  EN_dmem_master_ar_drop,
		  RDY_dmem_master_ar_drop,

		  dmem_master_r_canPut,

		  dmem_master_r_put_val,
		  EN_dmem_master_r_put,
		  RDY_dmem_master_r_put,

		  EN_server_fence_i_request_put,
		  RDY_server_fence_i_request_put,

		  EN_server_fence_i_response_get,
		  RDY_server_fence_i_response_get,

		  server_fence_request_put,
		  EN_server_fence_request_put,
		  RDY_server_fence_request_put,

		  EN_server_fence_response_get,
		  RDY_server_fence_response_get,

		  EN_sfence_vma,
		  RDY_sfence_vma);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method imem_req
  input  [2 : 0] imem_req_width_code;
  input  [31 : 0] imem_req_addr;
  input  [1 : 0] imem_req_priv;
  input  imem_req_sstatus_SUM;
  input  imem_req_mstatus_MXR;
  input  [31 : 0] imem_req_satp;
  input  EN_imem_req;

  // action method imem_commit
  input  EN_imem_commit;

  // value method imem_valid
  output imem_valid;

  // value method imem_is_i32_not_i16
  output imem_is_i32_not_i16;

  // value method imem_pc
  output [31 : 0] imem_pc;

  // value method imem_instr
  output [31 : 0] imem_instr;

  // value method imem_exc
  output imem_exc;

  // value method imem_exc_code
  output [5 : 0] imem_exc_code;

  // value method imem_tval
  output [31 : 0] imem_tval;

  // value method imem_events
  output [13 : 0] imem_events;
  output RDY_imem_events;

  // value method imem_master_aw_canPeek
  output imem_master_aw_canPeek;

  // value method imem_master_aw_peek
  output [97 : 0] imem_master_aw_peek;
  output RDY_imem_master_aw_peek;

  // action method imem_master_aw_drop
  input  EN_imem_master_aw_drop;
  output RDY_imem_master_aw_drop;

  // value method imem_master_w_canPeek
  output imem_master_w_canPeek;

  // value method imem_master_w_peek
  output [73 : 0] imem_master_w_peek;
  output RDY_imem_master_w_peek;

  // action method imem_master_w_drop
  input  EN_imem_master_w_drop;
  output RDY_imem_master_w_drop;

  // value method imem_master_b_canPut
  output imem_master_b_canPut;

  // action method imem_master_b_put
  input  [6 : 0] imem_master_b_put_val;
  input  EN_imem_master_b_put;
  output RDY_imem_master_b_put;

  // value method imem_master_ar_canPeek
  output imem_master_ar_canPeek;

  // value method imem_master_ar_peek
  output [97 : 0] imem_master_ar_peek;
  output RDY_imem_master_ar_peek;

  // action method imem_master_ar_drop
  input  EN_imem_master_ar_drop;
  output RDY_imem_master_ar_drop;

  // value method imem_master_r_canPut
  output imem_master_r_canPut;

  // action method imem_master_r_put
  input  [72 : 0] imem_master_r_put_val;
  input  EN_imem_master_r_put;
  output RDY_imem_master_r_put;

  // action method dmem_req
  input  [1 : 0] dmem_req_op;
  input  [2 : 0] dmem_req_width_code;
  input  dmem_req_is_unsigned;
  input  [4 : 0] dmem_req_amo_funct5;
  input  [31 : 0] dmem_req_addr;
  input  [128 : 0] dmem_req_store_value;
  input  [1 : 0] dmem_req_priv;
  input  dmem_req_sstatus_SUM;
  input  dmem_req_mstatus_MXR;
  input  [31 : 0] dmem_req_satp;
  input  EN_dmem_req;

  // action method dmem_commit
  input  EN_dmem_commit;

  // value method dmem_valid
  output dmem_valid;

  // value method dmem_word128_fst
  output dmem_word128_fst;

  // value method dmem_word128_snd
  output [127 : 0] dmem_word128_snd;

  // value method dmem_st_amo_val
  output [127 : 0] dmem_st_amo_val;

  // value method dmem_exc
  output dmem_exc;

  // value method dmem_exc_code
  output [5 : 0] dmem_exc_code;

  // value method dmem_events
  output [13 : 0] dmem_events;
  output RDY_dmem_events;

  // value method dmem_master_aw_canPeek
  output dmem_master_aw_canPeek;

  // value method dmem_master_aw_peek
  output [96 : 0] dmem_master_aw_peek;
  output RDY_dmem_master_aw_peek;

  // action method dmem_master_aw_drop
  input  EN_dmem_master_aw_drop;
  output RDY_dmem_master_aw_drop;

  // value method dmem_master_w_canPeek
  output dmem_master_w_canPeek;

  // value method dmem_master_w_peek
  output [73 : 0] dmem_master_w_peek;
  output RDY_dmem_master_w_peek;

  // action method dmem_master_w_drop
  input  EN_dmem_master_w_drop;
  output RDY_dmem_master_w_drop;

  // value method dmem_master_b_canPut
  output dmem_master_b_canPut;

  // action method dmem_master_b_put
  input  [5 : 0] dmem_master_b_put_val;
  input  EN_dmem_master_b_put;
  output RDY_dmem_master_b_put;

  // value method dmem_master_ar_canPeek
  output dmem_master_ar_canPeek;

  // value method dmem_master_ar_peek
  output [96 : 0] dmem_master_ar_peek;
  output RDY_dmem_master_ar_peek;

  // action method dmem_master_ar_drop
  input  EN_dmem_master_ar_drop;
  output RDY_dmem_master_ar_drop;

  // value method dmem_master_r_canPut
  output dmem_master_r_canPut;

  // action method dmem_master_r_put
  input  [71 : 0] dmem_master_r_put_val;
  input  EN_dmem_master_r_put;
  output RDY_dmem_master_r_put;

  // action method server_fence_i_request_put
  input  EN_server_fence_i_request_put;
  output RDY_server_fence_i_request_put;

  // action method server_fence_i_response_get
  input  EN_server_fence_i_response_get;
  output RDY_server_fence_i_response_get;

  // action method server_fence_request_put
  input  [7 : 0] server_fence_request_put;
  input  EN_server_fence_request_put;
  output RDY_server_fence_request_put;

  // action method server_fence_response_get
  input  EN_server_fence_response_get;
  output RDY_server_fence_response_get;

  // action method sfence_vma
  input  EN_sfence_vma;
  output RDY_sfence_vma;

  // signals for module outputs
  wire [127 : 0] dmem_st_amo_val, dmem_word128_snd;
  wire [97 : 0] imem_master_ar_peek, imem_master_aw_peek;
  wire [96 : 0] dmem_master_ar_peek, dmem_master_aw_peek;
  wire [73 : 0] dmem_master_w_peek, imem_master_w_peek;
  wire [31 : 0] imem_instr, imem_pc, imem_tval;
  wire [13 : 0] dmem_events, imem_events;
  wire [5 : 0] dmem_exc_code, imem_exc_code;
  wire RDY_dmem_events,
       RDY_dmem_master_ar_drop,
       RDY_dmem_master_ar_peek,
       RDY_dmem_master_aw_drop,
       RDY_dmem_master_aw_peek,
       RDY_dmem_master_b_put,
       RDY_dmem_master_r_put,
       RDY_dmem_master_w_drop,
       RDY_dmem_master_w_peek,
       RDY_imem_events,
       RDY_imem_master_ar_drop,
       RDY_imem_master_ar_peek,
       RDY_imem_master_aw_drop,
       RDY_imem_master_aw_peek,
       RDY_imem_master_b_put,
       RDY_imem_master_r_put,
       RDY_imem_master_w_drop,
       RDY_imem_master_w_peek,
       RDY_server_fence_i_request_put,
       RDY_server_fence_i_response_get,
       RDY_server_fence_request_put,
       RDY_server_fence_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_sfence_vma,
       dmem_exc,
       dmem_master_ar_canPeek,
       dmem_master_aw_canPeek,
       dmem_master_b_canPut,
       dmem_master_r_canPut,
       dmem_master_w_canPeek,
       dmem_valid,
       dmem_word128_fst,
       imem_exc,
       imem_is_i32_not_i16,
       imem_master_ar_canPeek,
       imem_master_aw_canPeek,
       imem_master_b_canPut,
       imem_master_r_canPut,
       imem_master_w_canPeek,
       imem_valid;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule dcache
  wire [128 : 0] dcache$req_st_value;
  wire [127 : 0] dcache$st_amo_val_snd, dcache$word128_snd;
  wire [96 : 0] dcache$mem_master_ar_peek, dcache$mem_master_aw_peek;
  wire [73 : 0] dcache$mem_master_w_peek;
  wire [71 : 0] dcache$mem_master_r_put_val;
  wire [31 : 0] dcache$req_addr, dcache$req_satp;
  wire [13 : 0] dcache$events;
  wire [5 : 0] dcache$exc_code, dcache$mem_master_b_put_val;
  wire [4 : 0] dcache$req_amo_funct5;
  wire [3 : 0] dcache$set_verbosity_verbosity;
  wire [2 : 0] dcache$req_width_code;
  wire [1 : 0] dcache$req_op, dcache$req_priv;
  wire dcache$EN_commit,
       dcache$EN_mem_master_ar_drop,
       dcache$EN_mem_master_aw_drop,
       dcache$EN_mem_master_b_put,
       dcache$EN_mem_master_r_put,
       dcache$EN_mem_master_w_drop,
       dcache$EN_req,
       dcache$EN_server_flush_request_put,
       dcache$EN_server_flush_response_get,
       dcache$EN_server_reset_request_put,
       dcache$EN_server_reset_response_get,
       dcache$EN_set_verbosity,
       dcache$EN_tlb_flush,
       dcache$RDY_mem_master_ar_drop,
       dcache$RDY_mem_master_ar_peek,
       dcache$RDY_mem_master_aw_drop,
       dcache$RDY_mem_master_aw_peek,
       dcache$RDY_mem_master_b_put,
       dcache$RDY_mem_master_r_put,
       dcache$RDY_mem_master_w_drop,
       dcache$RDY_mem_master_w_peek,
       dcache$RDY_server_flush_request_put,
       dcache$RDY_server_flush_response_get,
       dcache$RDY_server_reset_request_put,
       dcache$RDY_server_reset_response_get,
       dcache$exc,
       dcache$mem_master_ar_canPeek,
       dcache$mem_master_aw_canPeek,
       dcache$mem_master_b_canPut,
       dcache$mem_master_r_canPut,
       dcache$mem_master_w_canPeek,
       dcache$req_is_unsigned,
       dcache$req_mstatus_MXR,
       dcache$req_sstatus_SUM,
       dcache$valid,
       dcache$word128_fst;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule icache
  wire [128 : 0] icache$req_st_value;
  wire [127 : 0] icache$word128_snd;
  wire [97 : 0] icache$mem_master_ar_peek, icache$mem_master_aw_peek;
  wire [73 : 0] icache$mem_master_w_peek;
  wire [72 : 0] icache$mem_master_r_put_val;
  wire [31 : 0] icache$addr, icache$req_addr, icache$req_satp;
  wire [13 : 0] icache$events;
  wire [6 : 0] icache$mem_master_b_put_val;
  wire [5 : 0] icache$exc_code;
  wire [4 : 0] icache$req_amo_funct5;
  wire [3 : 0] icache$set_verbosity_verbosity;
  wire [2 : 0] icache$req_width_code;
  wire [1 : 0] icache$req_op, icache$req_priv;
  wire icache$EN_commit,
       icache$EN_mem_master_ar_drop,
       icache$EN_mem_master_aw_drop,
       icache$EN_mem_master_b_put,
       icache$EN_mem_master_r_put,
       icache$EN_mem_master_w_drop,
       icache$EN_req,
       icache$EN_server_flush_request_put,
       icache$EN_server_flush_response_get,
       icache$EN_server_reset_request_put,
       icache$EN_server_reset_response_get,
       icache$EN_set_verbosity,
       icache$EN_tlb_flush,
       icache$RDY_mem_master_ar_drop,
       icache$RDY_mem_master_ar_peek,
       icache$RDY_mem_master_aw_drop,
       icache$RDY_mem_master_aw_peek,
       icache$RDY_mem_master_b_put,
       icache$RDY_mem_master_r_put,
       icache$RDY_mem_master_w_drop,
       icache$RDY_mem_master_w_peek,
       icache$RDY_server_flush_request_put,
       icache$RDY_server_flush_response_get,
       icache$RDY_server_reset_request_put,
       icache$RDY_server_reset_response_get,
       icache$exc,
       icache$mem_master_ar_canPeek,
       icache$mem_master_aw_canPeek,
       icache$mem_master_b_canPut,
       icache$mem_master_r_canPut,
       icache$mem_master_w_canPeek,
       icache$req_is_unsigned,
       icache$req_mstatus_MXR,
       icache$req_sstatus_SUM,
       icache$valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_dmem_commit,
       CAN_FIRE_dmem_master_ar_drop,
       CAN_FIRE_dmem_master_aw_drop,
       CAN_FIRE_dmem_master_b_put,
       CAN_FIRE_dmem_master_r_put,
       CAN_FIRE_dmem_master_w_drop,
       CAN_FIRE_dmem_req,
       CAN_FIRE_imem_commit,
       CAN_FIRE_imem_master_ar_drop,
       CAN_FIRE_imem_master_aw_drop,
       CAN_FIRE_imem_master_b_put,
       CAN_FIRE_imem_master_r_put,
       CAN_FIRE_imem_master_w_drop,
       CAN_FIRE_imem_req,
       CAN_FIRE_server_fence_i_request_put,
       CAN_FIRE_server_fence_i_response_get,
       CAN_FIRE_server_fence_request_put,
       CAN_FIRE_server_fence_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_sfence_vma,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_dmem_commit,
       WILL_FIRE_dmem_master_ar_drop,
       WILL_FIRE_dmem_master_aw_drop,
       WILL_FIRE_dmem_master_b_put,
       WILL_FIRE_dmem_master_r_put,
       WILL_FIRE_dmem_master_w_drop,
       WILL_FIRE_dmem_req,
       WILL_FIRE_imem_commit,
       WILL_FIRE_imem_master_ar_drop,
       WILL_FIRE_imem_master_aw_drop,
       WILL_FIRE_imem_master_b_put,
       WILL_FIRE_imem_master_r_put,
       WILL_FIRE_imem_master_w_drop,
       WILL_FIRE_imem_req,
       WILL_FIRE_server_fence_i_request_put,
       WILL_FIRE_server_fence_i_response_get,
       WILL_FIRE_server_fence_request_put,
       WILL_FIRE_server_fence_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_sfence_vma;

  // inputs to muxes for submodule ports
  wire MUX_rg_state$write_1__SEL_2, MUX_rg_state$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1177;
  reg [31 : 0] v__h1331;
  reg [31 : 0] v__h1171;
  reg [31 : 0] v__h1325;
  // synopsys translate_on

  // remaining internal signals
  wire NOT_cfg_verbosity_read_ULE_1___d9;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = rg_state == 2'd2 ;
  assign CAN_FIRE_server_reset_request_put = rg_state == 2'd2 ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method imem_req
  assign CAN_FIRE_imem_req = 1'd1 ;
  assign WILL_FIRE_imem_req = EN_imem_req ;

  // action method imem_commit
  assign CAN_FIRE_imem_commit = 1'd1 ;
  assign WILL_FIRE_imem_commit = EN_imem_commit ;

  // value method imem_valid
  assign imem_valid = icache$valid ;

  // value method imem_is_i32_not_i16
  assign imem_is_i32_not_i16 = 1'd1 ;

  // value method imem_pc
  assign imem_pc = icache$addr ;

  // value method imem_instr
  assign imem_instr = icache$word128_snd[31:0] ;

  // value method imem_exc
  assign imem_exc = icache$exc ;

  // value method imem_exc_code
  assign imem_exc_code = icache$exc_code ;

  // value method imem_tval
  assign imem_tval = icache$addr ;

  // value method imem_events
  assign imem_events = icache$events ;
  assign RDY_imem_events = 1'd1 ;

  // value method imem_master_aw_canPeek
  assign imem_master_aw_canPeek = icache$mem_master_aw_canPeek ;

  // value method imem_master_aw_peek
  assign imem_master_aw_peek = icache$mem_master_aw_peek ;
  assign RDY_imem_master_aw_peek = icache$RDY_mem_master_aw_peek ;

  // action method imem_master_aw_drop
  assign RDY_imem_master_aw_drop = icache$RDY_mem_master_aw_drop ;
  assign CAN_FIRE_imem_master_aw_drop = icache$RDY_mem_master_aw_drop ;
  assign WILL_FIRE_imem_master_aw_drop = EN_imem_master_aw_drop ;

  // value method imem_master_w_canPeek
  assign imem_master_w_canPeek = icache$mem_master_w_canPeek ;

  // value method imem_master_w_peek
  assign imem_master_w_peek = icache$mem_master_w_peek ;
  assign RDY_imem_master_w_peek = icache$RDY_mem_master_w_peek ;

  // action method imem_master_w_drop
  assign RDY_imem_master_w_drop = icache$RDY_mem_master_w_drop ;
  assign CAN_FIRE_imem_master_w_drop = icache$RDY_mem_master_w_drop ;
  assign WILL_FIRE_imem_master_w_drop = EN_imem_master_w_drop ;

  // value method imem_master_b_canPut
  assign imem_master_b_canPut = icache$mem_master_b_canPut ;

  // action method imem_master_b_put
  assign RDY_imem_master_b_put = icache$RDY_mem_master_b_put ;
  assign CAN_FIRE_imem_master_b_put = icache$RDY_mem_master_b_put ;
  assign WILL_FIRE_imem_master_b_put = EN_imem_master_b_put ;

  // value method imem_master_ar_canPeek
  assign imem_master_ar_canPeek = icache$mem_master_ar_canPeek ;

  // value method imem_master_ar_peek
  assign imem_master_ar_peek = icache$mem_master_ar_peek ;
  assign RDY_imem_master_ar_peek = icache$RDY_mem_master_ar_peek ;

  // action method imem_master_ar_drop
  assign RDY_imem_master_ar_drop = icache$RDY_mem_master_ar_drop ;
  assign CAN_FIRE_imem_master_ar_drop = icache$RDY_mem_master_ar_drop ;
  assign WILL_FIRE_imem_master_ar_drop = EN_imem_master_ar_drop ;

  // value method imem_master_r_canPut
  assign imem_master_r_canPut = icache$mem_master_r_canPut ;

  // action method imem_master_r_put
  assign RDY_imem_master_r_put = icache$RDY_mem_master_r_put ;
  assign CAN_FIRE_imem_master_r_put = icache$RDY_mem_master_r_put ;
  assign WILL_FIRE_imem_master_r_put = EN_imem_master_r_put ;

  // action method dmem_req
  assign CAN_FIRE_dmem_req = 1'd1 ;
  assign WILL_FIRE_dmem_req = EN_dmem_req ;

  // action method dmem_commit
  assign CAN_FIRE_dmem_commit = 1'd1 ;
  assign WILL_FIRE_dmem_commit = EN_dmem_commit ;

  // value method dmem_valid
  assign dmem_valid = dcache$valid ;

  // value method dmem_word128_fst
  assign dmem_word128_fst = dcache$word128_fst ;

  // value method dmem_word128_snd
  assign dmem_word128_snd = dcache$word128_snd ;

  // value method dmem_st_amo_val
  assign dmem_st_amo_val = dcache$st_amo_val_snd ;

  // value method dmem_exc
  assign dmem_exc = dcache$exc ;

  // value method dmem_exc_code
  assign dmem_exc_code = dcache$exc_code ;

  // value method dmem_events
  assign dmem_events = dcache$events ;
  assign RDY_dmem_events = 1'd1 ;

  // value method dmem_master_aw_canPeek
  assign dmem_master_aw_canPeek = dcache$mem_master_aw_canPeek ;

  // value method dmem_master_aw_peek
  assign dmem_master_aw_peek = dcache$mem_master_aw_peek ;
  assign RDY_dmem_master_aw_peek = dcache$RDY_mem_master_aw_peek ;

  // action method dmem_master_aw_drop
  assign RDY_dmem_master_aw_drop = dcache$RDY_mem_master_aw_drop ;
  assign CAN_FIRE_dmem_master_aw_drop = dcache$RDY_mem_master_aw_drop ;
  assign WILL_FIRE_dmem_master_aw_drop = EN_dmem_master_aw_drop ;

  // value method dmem_master_w_canPeek
  assign dmem_master_w_canPeek = dcache$mem_master_w_canPeek ;

  // value method dmem_master_w_peek
  assign dmem_master_w_peek = dcache$mem_master_w_peek ;
  assign RDY_dmem_master_w_peek = dcache$RDY_mem_master_w_peek ;

  // action method dmem_master_w_drop
  assign RDY_dmem_master_w_drop = dcache$RDY_mem_master_w_drop ;
  assign CAN_FIRE_dmem_master_w_drop = dcache$RDY_mem_master_w_drop ;
  assign WILL_FIRE_dmem_master_w_drop = EN_dmem_master_w_drop ;

  // value method dmem_master_b_canPut
  assign dmem_master_b_canPut = dcache$mem_master_b_canPut ;

  // action method dmem_master_b_put
  assign RDY_dmem_master_b_put = dcache$RDY_mem_master_b_put ;
  assign CAN_FIRE_dmem_master_b_put = dcache$RDY_mem_master_b_put ;
  assign WILL_FIRE_dmem_master_b_put = EN_dmem_master_b_put ;

  // value method dmem_master_ar_canPeek
  assign dmem_master_ar_canPeek = dcache$mem_master_ar_canPeek ;

  // value method dmem_master_ar_peek
  assign dmem_master_ar_peek = dcache$mem_master_ar_peek ;
  assign RDY_dmem_master_ar_peek = dcache$RDY_mem_master_ar_peek ;

  // action method dmem_master_ar_drop
  assign RDY_dmem_master_ar_drop = dcache$RDY_mem_master_ar_drop ;
  assign CAN_FIRE_dmem_master_ar_drop = dcache$RDY_mem_master_ar_drop ;
  assign WILL_FIRE_dmem_master_ar_drop = EN_dmem_master_ar_drop ;

  // value method dmem_master_r_canPut
  assign dmem_master_r_canPut = dcache$mem_master_r_canPut ;

  // action method dmem_master_r_put
  assign RDY_dmem_master_r_put = dcache$RDY_mem_master_r_put ;
  assign CAN_FIRE_dmem_master_r_put = dcache$RDY_mem_master_r_put ;
  assign WILL_FIRE_dmem_master_r_put = EN_dmem_master_r_put ;

  // action method server_fence_i_request_put
  assign RDY_server_fence_i_request_put =
	     rg_state != 2'd0 && icache$RDY_server_flush_request_put &&
	     dcache$RDY_server_flush_request_put ;
  assign CAN_FIRE_server_fence_i_request_put =
	     rg_state != 2'd0 && icache$RDY_server_flush_request_put &&
	     dcache$RDY_server_flush_request_put ;
  assign WILL_FIRE_server_fence_i_request_put =
	     EN_server_fence_i_request_put ;

  // action method server_fence_i_response_get
  assign RDY_server_fence_i_response_get =
	     icache$RDY_server_flush_response_get &&
	     dcache$RDY_server_flush_response_get ;
  assign CAN_FIRE_server_fence_i_response_get =
	     icache$RDY_server_flush_response_get &&
	     dcache$RDY_server_flush_response_get ;
  assign WILL_FIRE_server_fence_i_response_get =
	     EN_server_fence_i_response_get ;

  // action method server_fence_request_put
  assign RDY_server_fence_request_put = dcache$RDY_server_flush_request_put ;
  assign CAN_FIRE_server_fence_request_put =
	     dcache$RDY_server_flush_request_put ;
  assign WILL_FIRE_server_fence_request_put = EN_server_fence_request_put ;

  // action method server_fence_response_get
  assign RDY_server_fence_response_get =
	     dcache$RDY_server_flush_response_get ;
  assign CAN_FIRE_server_fence_response_get =
	     dcache$RDY_server_flush_response_get ;
  assign WILL_FIRE_server_fence_response_get = EN_server_fence_response_get ;

  // action method sfence_vma
  assign RDY_sfence_vma = 1'd1 ;
  assign CAN_FIRE_sfence_vma = 1'd1 ;
  assign WILL_FIRE_sfence_vma = EN_sfence_vma ;

  // submodule dcache
  mkMMU_DCache dcache(.CLK(CLK),
		      .RST_N(RST_N),
		      .mem_master_b_put_val(dcache$mem_master_b_put_val),
		      .mem_master_r_put_val(dcache$mem_master_r_put_val),
		      .req_addr(dcache$req_addr),
		      .req_amo_funct5(dcache$req_amo_funct5),
		      .req_is_unsigned(dcache$req_is_unsigned),
		      .req_mstatus_MXR(dcache$req_mstatus_MXR),
		      .req_op(dcache$req_op),
		      .req_priv(dcache$req_priv),
		      .req_satp(dcache$req_satp),
		      .req_sstatus_SUM(dcache$req_sstatus_SUM),
		      .req_st_value(dcache$req_st_value),
		      .req_width_code(dcache$req_width_code),
		      .set_verbosity_verbosity(dcache$set_verbosity_verbosity),
		      .EN_set_verbosity(dcache$EN_set_verbosity),
		      .EN_server_reset_request_put(dcache$EN_server_reset_request_put),
		      .EN_server_reset_response_get(dcache$EN_server_reset_response_get),
		      .EN_req(dcache$EN_req),
		      .EN_commit(dcache$EN_commit),
		      .EN_server_flush_request_put(dcache$EN_server_flush_request_put),
		      .EN_server_flush_response_get(dcache$EN_server_flush_response_get),
		      .EN_tlb_flush(dcache$EN_tlb_flush),
		      .EN_mem_master_aw_drop(dcache$EN_mem_master_aw_drop),
		      .EN_mem_master_w_drop(dcache$EN_mem_master_w_drop),
		      .EN_mem_master_b_put(dcache$EN_mem_master_b_put),
		      .EN_mem_master_ar_drop(dcache$EN_mem_master_ar_drop),
		      .EN_mem_master_r_put(dcache$EN_mem_master_r_put),
		      .RDY_set_verbosity(),
		      .RDY_server_reset_request_put(dcache$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(dcache$RDY_server_reset_response_get),
		      .valid(dcache$valid),
		      .addr(),
		      .word128_fst(dcache$word128_fst),
		      .word128_snd(dcache$word128_snd),
		      .st_amo_val_fst(),
		      .st_amo_val_snd(dcache$st_amo_val_snd),
		      .exc(dcache$exc),
		      .exc_code(dcache$exc_code),
		      .RDY_server_flush_request_put(dcache$RDY_server_flush_request_put),
		      .RDY_server_flush_response_get(dcache$RDY_server_flush_response_get),
		      .RDY_tlb_flush(),
		      .mem_master_aw_canPeek(dcache$mem_master_aw_canPeek),
		      .mem_master_aw_peek(dcache$mem_master_aw_peek),
		      .RDY_mem_master_aw_peek(dcache$RDY_mem_master_aw_peek),
		      .RDY_mem_master_aw_drop(dcache$RDY_mem_master_aw_drop),
		      .mem_master_w_canPeek(dcache$mem_master_w_canPeek),
		      .mem_master_w_peek(dcache$mem_master_w_peek),
		      .RDY_mem_master_w_peek(dcache$RDY_mem_master_w_peek),
		      .RDY_mem_master_w_drop(dcache$RDY_mem_master_w_drop),
		      .mem_master_b_canPut(dcache$mem_master_b_canPut),
		      .RDY_mem_master_b_put(dcache$RDY_mem_master_b_put),
		      .mem_master_ar_canPeek(dcache$mem_master_ar_canPeek),
		      .mem_master_ar_peek(dcache$mem_master_ar_peek),
		      .RDY_mem_master_ar_peek(dcache$RDY_mem_master_ar_peek),
		      .RDY_mem_master_ar_drop(dcache$RDY_mem_master_ar_drop),
		      .mem_master_r_canPut(dcache$mem_master_r_canPut),
		      .RDY_mem_master_r_put(dcache$RDY_mem_master_r_put),
		      .events(dcache$events),
		      .RDY_events());

  // submodule f_reset_rsps
  FIFO20 #(.guarded(1'd1)) f_reset_rsps(.RST(RST_N),
					.CLK(CLK),
					.ENQ(f_reset_rsps$ENQ),
					.DEQ(f_reset_rsps$DEQ),
					.CLR(f_reset_rsps$CLR),
					.FULL_N(f_reset_rsps$FULL_N),
					.EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule icache
  mkMMU_ICache icache(.CLK(CLK),
		      .RST_N(RST_N),
		      .mem_master_b_put_val(icache$mem_master_b_put_val),
		      .mem_master_r_put_val(icache$mem_master_r_put_val),
		      .req_addr(icache$req_addr),
		      .req_amo_funct5(icache$req_amo_funct5),
		      .req_is_unsigned(icache$req_is_unsigned),
		      .req_mstatus_MXR(icache$req_mstatus_MXR),
		      .req_op(icache$req_op),
		      .req_priv(icache$req_priv),
		      .req_satp(icache$req_satp),
		      .req_sstatus_SUM(icache$req_sstatus_SUM),
		      .req_st_value(icache$req_st_value),
		      .req_width_code(icache$req_width_code),
		      .set_verbosity_verbosity(icache$set_verbosity_verbosity),
		      .EN_set_verbosity(icache$EN_set_verbosity),
		      .EN_server_reset_request_put(icache$EN_server_reset_request_put),
		      .EN_server_reset_response_get(icache$EN_server_reset_response_get),
		      .EN_req(icache$EN_req),
		      .EN_commit(icache$EN_commit),
		      .EN_server_flush_request_put(icache$EN_server_flush_request_put),
		      .EN_server_flush_response_get(icache$EN_server_flush_response_get),
		      .EN_tlb_flush(icache$EN_tlb_flush),
		      .EN_mem_master_aw_drop(icache$EN_mem_master_aw_drop),
		      .EN_mem_master_w_drop(icache$EN_mem_master_w_drop),
		      .EN_mem_master_b_put(icache$EN_mem_master_b_put),
		      .EN_mem_master_ar_drop(icache$EN_mem_master_ar_drop),
		      .EN_mem_master_r_put(icache$EN_mem_master_r_put),
		      .RDY_set_verbosity(),
		      .RDY_server_reset_request_put(icache$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(icache$RDY_server_reset_response_get),
		      .valid(icache$valid),
		      .addr(icache$addr),
		      .word128_fst(),
		      .word128_snd(icache$word128_snd),
		      .st_amo_val_fst(),
		      .st_amo_val_snd(),
		      .exc(icache$exc),
		      .exc_code(icache$exc_code),
		      .RDY_server_flush_request_put(icache$RDY_server_flush_request_put),
		      .RDY_server_flush_response_get(icache$RDY_server_flush_response_get),
		      .RDY_tlb_flush(),
		      .mem_master_aw_canPeek(icache$mem_master_aw_canPeek),
		      .mem_master_aw_peek(icache$mem_master_aw_peek),
		      .RDY_mem_master_aw_peek(icache$RDY_mem_master_aw_peek),
		      .RDY_mem_master_aw_drop(icache$RDY_mem_master_aw_drop),
		      .mem_master_w_canPeek(icache$mem_master_w_canPeek),
		      .mem_master_w_peek(icache$mem_master_w_peek),
		      .RDY_mem_master_w_peek(icache$RDY_mem_master_w_peek),
		      .RDY_mem_master_w_drop(icache$RDY_mem_master_w_drop),
		      .mem_master_b_canPut(icache$mem_master_b_canPut),
		      .RDY_mem_master_b_put(icache$RDY_mem_master_b_put),
		      .mem_master_ar_canPeek(icache$mem_master_ar_canPeek),
		      .mem_master_ar_peek(icache$mem_master_ar_peek),
		      .RDY_mem_master_ar_peek(icache$RDY_mem_master_ar_peek),
		      .RDY_mem_master_ar_drop(icache$RDY_mem_master_ar_drop),
		      .mem_master_r_canPut(icache$mem_master_r_canPut),
		      .RDY_mem_master_r_put(icache$RDY_mem_master_r_put),
		      .events(icache$events),
		      .RDY_events());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(),
		    .m_near_mem_io_addr_range(),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     icache$RDY_server_reset_request_put &&
	     dcache$RDY_server_reset_request_put &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_reset = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_reset && !EN_server_fence_request_put ;
  assign MUX_rg_state$write_1__SEL_3 =
	     icache$RDY_server_reset_response_get &&
	     dcache$RDY_server_reset_response_get &&
	     f_reset_rsps$FULL_N &&
	     rg_state == 2'd1 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register rg_state
  always@(EN_server_reset_request_put or
	  WILL_FIRE_RL_rl_reset or WILL_FIRE_RL_rl_reset_complete)
  begin
    case (1'b1) // synopsys parallel_case
      EN_server_reset_request_put: rg_state$D_IN = 2'd0;
      WILL_FIRE_RL_rl_reset: rg_state$D_IN = 2'd1;
      WILL_FIRE_RL_rl_reset_complete: rg_state$D_IN = 2'd2;
      default: rg_state$D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // submodule dcache
  assign dcache$mem_master_b_put_val = dmem_master_b_put_val ;
  assign dcache$mem_master_r_put_val = dmem_master_r_put_val ;
  assign dcache$req_addr = dmem_req_addr ;
  assign dcache$req_amo_funct5 = dmem_req_amo_funct5 ;
  assign dcache$req_is_unsigned = dmem_req_is_unsigned ;
  assign dcache$req_mstatus_MXR = dmem_req_mstatus_MXR ;
  assign dcache$req_op = dmem_req_op ;
  assign dcache$req_priv = dmem_req_priv ;
  assign dcache$req_satp = dmem_req_satp ;
  assign dcache$req_sstatus_SUM = dmem_req_sstatus_SUM ;
  assign dcache$req_st_value = dmem_req_store_value ;
  assign dcache$req_width_code = dmem_req_width_code ;
  assign dcache$set_verbosity_verbosity = 4'h0 ;
  assign dcache$EN_set_verbosity = 1'b0 ;
  assign dcache$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2 ;
  assign dcache$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_3 ;
  assign dcache$EN_req = EN_dmem_req ;
  assign dcache$EN_commit = EN_dmem_commit ;
  assign dcache$EN_server_flush_request_put =
	     EN_server_fence_i_request_put || EN_server_fence_request_put ;
  assign dcache$EN_server_flush_response_get =
	     EN_server_fence_i_response_get || EN_server_fence_response_get ;
  assign dcache$EN_tlb_flush = EN_sfence_vma ;
  assign dcache$EN_mem_master_aw_drop = EN_dmem_master_aw_drop ;
  assign dcache$EN_mem_master_w_drop = EN_dmem_master_w_drop ;
  assign dcache$EN_mem_master_b_put = EN_dmem_master_b_put ;
  assign dcache$EN_mem_master_ar_drop = EN_dmem_master_ar_drop ;
  assign dcache$EN_mem_master_r_put = EN_dmem_master_r_put ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_3 ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule icache
  assign icache$mem_master_b_put_val = imem_master_b_put_val ;
  assign icache$mem_master_r_put_val = imem_master_r_put_val ;
  assign icache$req_addr = imem_req_addr ;
  assign icache$req_amo_funct5 = 5'bxxxxx /* unspecified value */  ;
  assign icache$req_is_unsigned = 1'd1 ;
  assign icache$req_mstatus_MXR = imem_req_mstatus_MXR ;
  assign icache$req_op = 2'd0 ;
  assign icache$req_priv = imem_req_priv ;
  assign icache$req_satp = imem_req_satp ;
  assign icache$req_sstatus_SUM = imem_req_sstatus_SUM ;
  assign icache$req_st_value =
	     { 1'd0,
	       128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign icache$req_width_code = imem_req_width_code ;
  assign icache$set_verbosity_verbosity = 4'h0 ;
  assign icache$EN_set_verbosity = 1'b0 ;
  assign icache$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2 ;
  assign icache$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_3 ;
  assign icache$EN_req = EN_imem_req ;
  assign icache$EN_commit = EN_imem_commit ;
  assign icache$EN_server_flush_request_put = EN_server_fence_i_request_put ;
  assign icache$EN_server_flush_response_get =
	     EN_server_fence_i_response_get ;
  assign icache$EN_tlb_flush = EN_sfence_vma ;
  assign icache$EN_mem_master_aw_drop = EN_imem_master_aw_drop ;
  assign icache$EN_mem_master_w_drop = EN_imem_master_w_drop ;
  assign icache$EN_mem_master_b_put = EN_imem_master_b_put ;
  assign icache$EN_mem_master_ar_drop = EN_imem_master_ar_drop ;
  assign icache$EN_mem_master_r_put = EN_imem_master_r_put ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read_ULE_1___d9 = cfg_verbosity > 4'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read_ULE_1___d9)
	begin
	  v__h1177 = $stime;
	  #0;
	end
    v__h1171 = v__h1177 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read_ULE_1___d9)
	$display("%0d: Near_Mem.rl_reset", v__h1171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && NOT_cfg_verbosity_read_ULE_1___d9)
	begin
	  v__h1331 = $stime;
	  #0;
	end
    v__h1325 = v__h1331 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && NOT_cfg_verbosity_read_ULE_1___d9)
	$display("%0d: Near_Mem.rl_reset_complete", v__h1325);
  end
  // synopsys translate_on
endmodule  // mkNear_Mem

