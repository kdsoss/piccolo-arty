//
// Generated by Bluespec Compiler, version untagged-gad02e931 (build ad02e931)
//
// On Fri Jul 23 15:58:05 EEST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128 const
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_aw_canPeek          O     1 reg
// mem_master_aw_peek             O    98 reg
// RDY_mem_master_aw_peek         O     1 reg
// RDY_mem_master_aw_drop         O     1 reg
// mem_master_w_canPeek           O     1 reg
// mem_master_w_peek              O    74 reg
// RDY_mem_master_w_peek          O     1 reg
// RDY_mem_master_w_drop          O     1 reg
// mem_master_b_canPut            O     1 reg
// RDY_mem_master_b_put           O     1 reg
// mem_master_ar_canPeek          O     1 reg
// mem_master_ar_peek             O    98 reg
// RDY_mem_master_ar_peek         O     1 reg
// RDY_mem_master_ar_drop         O     1 reg
// mem_master_r_canPut            O     1 reg
// RDY_mem_master_r_put           O     1 reg
// events                         O    14 reg
// RDY_events                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct5                 I     5 reg
// req_addr                       I    32
// req_st_value                   I   129 reg
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_b_put_val           I     7 reg
// mem_master_r_put_val           I    73 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1 unused
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_mem_master_aw_drop          I     1
// EN_mem_master_w_drop           I     1
// EN_mem_master_b_put            I     1
// EN_mem_master_ar_drop          I     1
// EN_mem_master_r_put            I     1
//
// Combinational paths from inputs to outputs:
//   EN_commit -> valid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_ICache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct5,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_aw_canPeek,

		    mem_master_aw_peek,
		    RDY_mem_master_aw_peek,

		    EN_mem_master_aw_drop,
		    RDY_mem_master_aw_drop,

		    mem_master_w_canPeek,

		    mem_master_w_peek,
		    RDY_mem_master_w_peek,

		    EN_mem_master_w_drop,
		    RDY_mem_master_w_drop,

		    mem_master_b_canPut,

		    mem_master_b_put_val,
		    EN_mem_master_b_put,
		    RDY_mem_master_b_put,

		    mem_master_ar_canPeek,

		    mem_master_ar_peek,
		    RDY_mem_master_ar_peek,

		    EN_mem_master_ar_drop,
		    RDY_mem_master_ar_drop,

		    mem_master_r_canPut,

		    mem_master_r_put_val,
		    EN_mem_master_r_put,
		    RDY_mem_master_r_put,

		    events,
		    RDY_events);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [4 : 0] req_amo_funct5;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_canPeek
  output mem_master_aw_canPeek;

  // value method mem_master_aw_peek
  output [97 : 0] mem_master_aw_peek;
  output RDY_mem_master_aw_peek;

  // action method mem_master_aw_drop
  input  EN_mem_master_aw_drop;
  output RDY_mem_master_aw_drop;

  // value method mem_master_w_canPeek
  output mem_master_w_canPeek;

  // value method mem_master_w_peek
  output [73 : 0] mem_master_w_peek;
  output RDY_mem_master_w_peek;

  // action method mem_master_w_drop
  input  EN_mem_master_w_drop;
  output RDY_mem_master_w_drop;

  // value method mem_master_b_canPut
  output mem_master_b_canPut;

  // action method mem_master_b_put
  input  [6 : 0] mem_master_b_put_val;
  input  EN_mem_master_b_put;
  output RDY_mem_master_b_put;

  // value method mem_master_ar_canPeek
  output mem_master_ar_canPeek;

  // value method mem_master_ar_peek
  output [97 : 0] mem_master_ar_peek;
  output RDY_mem_master_ar_peek;

  // action method mem_master_ar_drop
  input  EN_mem_master_ar_drop;
  output RDY_mem_master_ar_drop;

  // value method mem_master_r_canPut
  output mem_master_r_canPut;

  // action method mem_master_r_put
  input  [72 : 0] mem_master_r_put_val;
  input  EN_mem_master_r_put;
  output RDY_mem_master_r_put;

  // value method events
  output [13 : 0] events;
  output RDY_events;

  // signals for module outputs
  wire [127 : 0] st_amo_val_snd, word128_snd;
  wire [97 : 0] mem_master_ar_peek, mem_master_aw_peek;
  wire [73 : 0] mem_master_w_peek;
  wire [31 : 0] addr;
  wire [13 : 0] events;
  wire [5 : 0] exc_code;
  wire RDY_events,
       RDY_mem_master_ar_drop,
       RDY_mem_master_ar_peek,
       RDY_mem_master_aw_drop,
       RDY_mem_master_aw_peek,
       RDY_mem_master_b_put,
       RDY_mem_master_r_put,
       RDY_mem_master_w_drop,
       RDY_mem_master_w_peek,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_ar_canPeek,
       mem_master_aw_canPeek,
       mem_master_b_canPut,
       mem_master_r_canPut,
       mem_master_w_canPeek,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  wire [128 : 0] cache_dw_output_ld_val$wget, cache_dw_output_st_amo_val$wget;
  wire [13 : 0] cache_aw_events_wires_ifc_ifc_wires_1$wget,
		cache_aw_events_wires_ifc_ifc_wires_3$wget,
		cache_aw_events_wires_ifc_ifc_wires_4$wget,
		cache_aw_events_wires_ifc_ifc_wires_6$wget;
  wire cache_dw_output_ld_val$whas,
       cache_dw_valid$whas,
       cache_rw_reset_req$whas;

  // register cache_aw_events_register
  reg [13 : 0] cache_aw_events_register;
  wire [13 : 0] cache_aw_events_register$D_IN;
  wire cache_aw_events_register$EN;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_allow_cap
  reg cache_rg_allow_cap;
  wire cache_rg_allow_cap$D_IN, cache_rg_allow_cap$EN;

  // register cache_rg_amo_funct5
  reg [4 : 0] cache_rg_amo_funct5;
  wire [4 : 0] cache_rg_amo_funct5$D_IN;
  wire cache_rg_amo_funct5$EN;

  // register cache_rg_cache_rereq_data
  reg cache_rg_cache_rereq_data;
  wire cache_rg_cache_rereq_data$D_IN, cache_rg_cache_rereq_data$EN;

  // register cache_rg_cset_in_cache
  reg [6 : 0] cache_rg_cset_in_cache;
  wire [6 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  wire [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_tag
  reg cache_rg_lower_tag;
  wire cache_rg_lower_tag$D_IN, cache_rg_lower_tag$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  reg cache_rg_lower_word64_full$D_IN;
  wire cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_mem_req_sent
  reg cache_rg_mem_req_sent;
  wire cache_rg_mem_req_sent$D_IN, cache_rg_mem_req_sent$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_tlb_walk
  reg cache_rg_tlb_walk;
  wire cache_rg_tlb_walk$D_IN, cache_rg_tlb_walk$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_fabric_write_reqs
  wire [163 : 0] cache_f_fabric_write_reqs$D_IN;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$ENQ;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_masterPortShim_arff
  wire [97 : 0] cache_masterPortShim_arff$D_IN,
		cache_masterPortShim_arff$D_OUT;
  wire cache_masterPortShim_arff$CLR,
       cache_masterPortShim_arff$DEQ,
       cache_masterPortShim_arff$EMPTY_N,
       cache_masterPortShim_arff$ENQ,
       cache_masterPortShim_arff$FULL_N;

  // ports of submodule cache_masterPortShim_awff
  wire [97 : 0] cache_masterPortShim_awff$D_IN,
		cache_masterPortShim_awff$D_OUT;
  wire cache_masterPortShim_awff$CLR,
       cache_masterPortShim_awff$DEQ,
       cache_masterPortShim_awff$EMPTY_N,
       cache_masterPortShim_awff$ENQ;

  // ports of submodule cache_masterPortShim_bff
  wire [6 : 0] cache_masterPortShim_bff$D_IN;
  wire cache_masterPortShim_bff$CLR,
       cache_masterPortShim_bff$DEQ,
       cache_masterPortShim_bff$ENQ,
       cache_masterPortShim_bff$FULL_N;

  // ports of submodule cache_masterPortShim_rff
  wire [72 : 0] cache_masterPortShim_rff$D_IN, cache_masterPortShim_rff$D_OUT;
  wire cache_masterPortShim_rff$CLR,
       cache_masterPortShim_rff$DEQ,
       cache_masterPortShim_rff$EMPTY_N,
       cache_masterPortShim_rff$ENQ,
       cache_masterPortShim_rff$FULL_N;

  // ports of submodule cache_masterPortShim_wff
  wire [73 : 0] cache_masterPortShim_wff$D_IN, cache_masterPortShim_wff$D_OUT;
  wire cache_masterPortShim_wff$CLR,
       cache_masterPortShim_wff$DEQ,
       cache_masterPortShim_wff$EMPTY_N,
       cache_masterPortShim_wff$ENQ;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [6 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_aw_events_update_reg,
       CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_do_set_req_valid,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_count_miss_lat,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE___me_check_10,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_drop,
       CAN_FIRE_mem_master_aw_drop,
       CAN_FIRE_mem_master_b_put,
       CAN_FIRE_mem_master_r_put,
       CAN_FIRE_mem_master_w_drop,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_aw_events_update_reg,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_do_set_req_valid,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_count_miss_lat,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE___me_check_10,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_drop,
       WILL_FIRE_mem_master_aw_drop,
       WILL_FIRE_mem_master_b_put,
       WILL_FIRE_mem_master_r_put,
       WILL_FIRE_mem_master_w_drop,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1,
		MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1;
  wire [5 : 0] MUX_cache_rg_exc_code$write_1__VAL_1;
  wire [3 : 0] MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_3,
	       MUX_cache_rg_state$write_1__VAL_5,
	       MUX_cache_rg_state$write_1__VAL_7;
  wire MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_lower_word64$write_1__SEL_2,
       MUX_cache_rg_lower_word64_full$write_1__SEL_1,
       MUX_cache_rg_lower_word64_full$write_1__SEL_3,
       MUX_cache_rg_state$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_3,
       MUX_cache_rg_state$write_1__SEL_5;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5598;
  reg [31 : 0] v__h6321;
  reg [31 : 0] v__h21764;
  reg [31 : 0] v__h22528;
  reg [31 : 0] v__h23291;
  reg [31 : 0] v__h23561;
  reg [31 : 0] v__h26538;
  reg [31 : 0] v__h27765;
  reg [31 : 0] v__h27901;
  reg [31 : 0] v__h27595;
  reg [31 : 0] v__h28030;
  reg [31 : 0] v__h6093;
  reg [31 : 0] v__h6190;
  reg [31 : 0] v__h33417;
  reg [31 : 0] v__h5592;
  reg [31 : 0] v__h6087;
  reg [31 : 0] v__h6184;
  reg [31 : 0] v__h6315;
  reg [31 : 0] v__h21758;
  reg [31 : 0] v__h22522;
  reg [31 : 0] v__h23285;
  reg [31 : 0] v__h23555;
  reg [31 : 0] v__h26532;
  reg [31 : 0] v__h27589;
  reg [31 : 0] v__h27759;
  reg [31 : 0] v__h27895;
  reg [31 : 0] v__h28024;
  reg [31 : 0] v__h33411;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo7373_ETC__q43,
	       IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803,
	       IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823,
	       IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551,
	       IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591,
	       IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611,
	       _theResult___snd__h7678,
	       _theResult___snd_fst__h20584,
	       _theResult___snd_fst__h26892,
	       _theResult___snd_snd__h20585;
  wire [129 : 0] cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441,
		 y__h7729;
  wire [127 : 0] x__h20583, x__h23829;
  wire [63 : 0] _theResult___snd__h26839,
		cline_fabric_addr__h22577,
		result_lo__h20622,
		result_lo__h20657,
		result_lo__h20690,
		result_lo__h20723,
		result_lo__h20756,
		result_lo__h20789,
		result_lo__h20822,
		result_lo__h20855,
		result_lo__h20888,
		result_lo__h20921,
		result_lo__h20954,
		result_lo__h20987,
		result_lo__h21020,
		result_lo__h21053,
		result_lo__h21086,
		result_lo__h21119,
		result_lo__h21174,
		result_lo__h21207,
		result_lo__h21240,
		result_lo__h21273,
		result_lo__h21306,
		result_lo__h21339,
		result_lo__h21372,
		result_lo__h21405,
		result_lo__h21452,
		result_lo__h21485,
		result_lo__h21518,
		result_lo__h21551,
		result_lo__h26929,
		result_lo__h26962,
		result_lo__h26995,
		result_lo__h27028,
		result_lo__h27061,
		result_lo__h27094,
		result_lo__h27127,
		result_lo__h27160,
		result_lo__h27223,
		result_lo__h27256,
		result_lo__h27289,
		result_lo__h27322,
		result_lo__h27373,
		result_lo__h27406;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q45,
		cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3,
		cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38,
		cline_addr__h22576;
  wire [21 : 0] pa_ctag__h7122;
  wire [15 : 0] cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2,
		cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6,
		cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9,
		cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q16,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41;
  wire [12 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d300;
  wire [10 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d299;
  wire [8 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d298;
  wire [7 : 0] cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1,
	       cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4,
	       cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5,
	       cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7,
	       cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8,
	       cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11,
	       cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12,
	       cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q15,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42;
  wire [6 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d297;
  wire [4 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d296;
  wire [2 : 0] cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d295;
  wire [1 : 0] _0__q44, x__h23824;
  wire IF_cache_rg_width_code_65_EQ_0b11_74_THEN_IF_c_ETC___d449,
       IF_cache_w_req_width_code_whas__74_THEN_cache__ETC___d969,
       IF_cache_w_req_width_code_whas__74_THEN_cache__ETC___d974,
       NOT_IF_cache_w_req_width_code_whas__74_THEN_ca_ETC___d953,
       NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679,
       cache_cfg_verbosity_read__26_ULE_1___d334,
       cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst =
	     cache_dw_output_ld_val$whas && cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_1 &&
	     cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_canPeek
  assign mem_master_aw_canPeek = cache_masterPortShim_awff$EMPTY_N ;

  // value method mem_master_aw_peek
  assign mem_master_aw_peek = cache_masterPortShim_awff$D_OUT ;
  assign RDY_mem_master_aw_peek = cache_masterPortShim_awff$EMPTY_N ;

  // action method mem_master_aw_drop
  assign RDY_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_mem_master_aw_drop = cache_masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_mem_master_aw_drop = EN_mem_master_aw_drop ;

  // value method mem_master_w_canPeek
  assign mem_master_w_canPeek = cache_masterPortShim_wff$EMPTY_N ;

  // value method mem_master_w_peek
  assign mem_master_w_peek = cache_masterPortShim_wff$D_OUT ;
  assign RDY_mem_master_w_peek = cache_masterPortShim_wff$EMPTY_N ;

  // action method mem_master_w_drop
  assign RDY_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_mem_master_w_drop = cache_masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_mem_master_w_drop = EN_mem_master_w_drop ;

  // value method mem_master_b_canPut
  assign mem_master_b_canPut = cache_masterPortShim_bff$FULL_N ;

  // action method mem_master_b_put
  assign RDY_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_mem_master_b_put = cache_masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_mem_master_b_put = EN_mem_master_b_put ;

  // value method mem_master_ar_canPeek
  assign mem_master_ar_canPeek = cache_masterPortShim_arff$EMPTY_N ;

  // value method mem_master_ar_peek
  assign mem_master_ar_peek = cache_masterPortShim_arff$D_OUT ;
  assign RDY_mem_master_ar_peek = cache_masterPortShim_arff$EMPTY_N ;

  // action method mem_master_ar_drop
  assign RDY_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_mem_master_ar_drop = cache_masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_mem_master_ar_drop = EN_mem_master_ar_drop ;

  // value method mem_master_r_canPut
  assign mem_master_r_canPut = cache_masterPortShim_rff$FULL_N ;

  // action method mem_master_r_put
  assign RDY_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_mem_master_r_put = cache_masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_mem_master_r_put = EN_mem_master_r_put ;

  // value method events
  assign events = cache_aw_events_register ;
  assign RDY_events = 1'd1 ;

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd164),
	  .guarded(1'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_f_fabric_write_reqs$D_IN),
						    .ENQ(cache_f_fabric_write_reqs$ENQ),
						    .DEQ(cache_f_fabric_write_reqs$DEQ),
						    .CLR(cache_f_fabric_write_reqs$CLR),
						    .D_OUT(),
						    .FULL_N(),
						    .EMPTY_N());

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_reqs$D_IN),
							    .ENQ(cache_f_reset_reqs$ENQ),
							    .DEQ(cache_f_reset_reqs$DEQ),
							    .CLR(cache_f_reset_reqs$CLR),
							    .D_OUT(cache_f_reset_reqs$D_OUT),
							    .FULL_N(cache_f_reset_reqs$FULL_N),
							    .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) cache_f_reset_rsps(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(cache_f_reset_rsps$D_IN),
							    .ENQ(cache_f_reset_rsps$ENQ),
							    .DEQ(cache_f_reset_rsps$DEQ),
							    .CLR(cache_f_reset_rsps$CLR),
							    .D_OUT(cache_f_reset_rsps$D_OUT),
							    .FULL_N(cache_f_reset_rsps$FULL_N),
							    .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_masterPortShim_arff
  FIFO2 #(.width(32'd98),
	  .guarded(1'd1)) cache_masterPortShim_arff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_arff$D_IN),
						    .ENQ(cache_masterPortShim_arff$ENQ),
						    .DEQ(cache_masterPortShim_arff$DEQ),
						    .CLR(cache_masterPortShim_arff$CLR),
						    .D_OUT(cache_masterPortShim_arff$D_OUT),
						    .FULL_N(cache_masterPortShim_arff$FULL_N),
						    .EMPTY_N(cache_masterPortShim_arff$EMPTY_N));

  // submodule cache_masterPortShim_awff
  FIFO2 #(.width(32'd98),
	  .guarded(1'd1)) cache_masterPortShim_awff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(cache_masterPortShim_awff$D_IN),
						    .ENQ(cache_masterPortShim_awff$ENQ),
						    .DEQ(cache_masterPortShim_awff$DEQ),
						    .CLR(cache_masterPortShim_awff$CLR),
						    .D_OUT(cache_masterPortShim_awff$D_OUT),
						    .FULL_N(),
						    .EMPTY_N(cache_masterPortShim_awff$EMPTY_N));

  // submodule cache_masterPortShim_bff
  FIFO2 #(.width(32'd7), .guarded(1'd1)) cache_masterPortShim_bff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(cache_masterPortShim_bff$D_IN),
								  .ENQ(cache_masterPortShim_bff$ENQ),
								  .DEQ(cache_masterPortShim_bff$DEQ),
								  .CLR(cache_masterPortShim_bff$CLR),
								  .D_OUT(),
								  .FULL_N(cache_masterPortShim_bff$FULL_N),
								  .EMPTY_N());

  // submodule cache_masterPortShim_rff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) cache_masterPortShim_rff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_rff$D_IN),
						   .ENQ(cache_masterPortShim_rff$ENQ),
						   .DEQ(cache_masterPortShim_rff$DEQ),
						   .CLR(cache_masterPortShim_rff$CLR),
						   .D_OUT(cache_masterPortShim_rff$D_OUT),
						   .FULL_N(cache_masterPortShim_rff$FULL_N),
						   .EMPTY_N(cache_masterPortShim_rff$EMPTY_N));

  // submodule cache_masterPortShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) cache_masterPortShim_wff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(cache_masterPortShim_wff$D_IN),
						   .ENQ(cache_masterPortShim_wff$ENQ),
						   .DEQ(cache_masterPortShim_wff$DEQ),
						   .CLR(cache_masterPortShim_wff$CLR),
						   .D_OUT(cache_masterPortShim_wff$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(cache_masterPortShim_wff$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							  .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							  .DIA(cache_ram_state_and_ctag_cset$DIA),
							  .DIB(cache_ram_state_and_ctag_cset$DIB),
							  .WEA(cache_ram_state_and_ctag_cset$WEA),
							  .WEB(cache_ram_state_and_ctag_cset$WEB),
							  .ENA(cache_ram_state_and_ctag_cset$ENA),
							  .ENB(cache_ram_state_and_ctag_cset$ENB),
							  .DOA(),
							  .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_uart16550_1_addr_range(),
			  .m_iic_0_addr_range(),
			  .m_axi_quad_spi_0_full_addr_range(),
			  .m_axi_quad_spi_0_lite_addr_range(),
			  .m_axi_quad_spi_1_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_gpio_1_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_count_miss_lat
  assign CAN_FIRE_RL_cache_rl_count_miss_lat =
	     !cache_f_reset_reqs$EMPTY_N &&
	     (cache_rg_state == 4'd8 || cache_rg_cache_rereq_data) ;
  assign WILL_FIRE_RL_cache_rl_count_miss_lat =
	     CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     cache_masterPortShim_arff$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     cache_masterPortShim_rff$EMPTY_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_rg_cset_in_cache != 7'd127 ||
	      cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req =
	     EN_req && EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req = CAN_FIRE_RL_cache_do_req ;

  // rule RL_cache_do_set_req_valid
  assign CAN_FIRE_RL_cache_do_set_req_valid = 1'd1 ;
  assign WILL_FIRE_RL_cache_do_set_req_valid = 1'd1 ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule RL_cache_aw_events_update_reg
  assign CAN_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;
  assign WILL_FIRE_RL_cache_aw_events_update_reg = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (IF_cache_w_req_width_code_whas__74_THEN_cache__ETC___d969 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__74_THEN_ca_ETC___d953 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_cache_rg_lower_word64$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign MUX_cache_rg_state$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	     { cache_rg_width_code != 3'd0 && cache_rg_width_code != 3'd1 &&
	       cache_rg_width_code != 3'b010 &&
	       IF_cache_rg_width_code_65_EQ_0b11_74_THEN_IF_c_ETC___d449,
	       x__h20583 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       { 65'd0, _theResult___snd_fst__h26892 } :
	       { 1'd0, x__h23829 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 =
	     { 1'd0, 22'bxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:5], 1'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 7'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     (NOT_IF_cache_w_req_width_code_whas__74_THEN_ca_ETC___d953 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_3 =
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1]) ?
	       ((cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ?
		  4'd14 :
		  4'd4) :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359) ?
	       cache_rg_state :
	       4'd8 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_dw_valid$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ;
  assign cache_dw_output_ld_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_1 ?
	       MUX_cache_dw_output_ld_val$wset_1__VAL_1 :
	       MUX_cache_dw_output_ld_val$wset_1__VAL_2 ;
  assign cache_dw_output_ld_val$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_dw_output_st_amo_val$wget =
	     { _0__q44[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q45[0]],
	       128'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_1$wget =
	     { 1'd0,
	       cache_rg_mem_req_sent && cache_rg_op == 2'd0 &&
	       (!cache_ram_state_and_ctag_cset$DOB[22] ||
		!cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359),
	       5'd0,
	       cache_rg_mem_req_sent && cache_rg_op == 2'd2 &&
	       (!cache_ram_state_and_ctag_cset$DOB[22] ||
		!cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359),
	       6'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_3$wget =
	     { 2'd0, cache_rg_op == 2'd0, 5'd0, cache_rg_op == 2'd2, 5'd0 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_4$wget =
	     { 13'd0, cache_ram_state_and_ctag_cset$DOB[22] } ;
  assign cache_aw_events_wires_ifc_ifc_wires_6$wget =
	     { req_op == 2'd0,
	       2'd0,
	       req_op == 2'd1,
	       2'd0,
	       req_op == 2'd2,
	       7'd0 } ;

  // register cache_aw_events_register
  assign cache_aw_events_register$D_IN =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[13]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[13]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[13]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[13]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d300 } ;
  assign cache_aw_events_register$EN = 1'd1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_inrg
  assign cache_ctr_wr_rsps_pending_inrg$D_IN = 4'h0 ;
  assign cache_ctr_wr_rsps_pending_inrg$EN = 1'b0 ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_allow_cap
  assign cache_rg_allow_cap$D_IN = 1'd1 ;
  assign cache_rg_allow_cap$EN = CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_amo_funct5
  assign cache_rg_amo_funct5$D_IN = req_amo_funct5 ;
  assign cache_rg_amo_funct5$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_cache_rereq_data
  assign cache_rg_cache_rereq_data$D_IN = cache_rg_state != 4'd3 ;
  assign cache_rg_cache_rereq_data$EN = CAN_FIRE_RL_cache_rl_count_miss_lat ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or cache_rg_exc_code)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = 6'd1;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = cache_rg_exc_code;
    default: cache_rg_exc_code$D_IN = 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_IF_cache_w_req_width_code_whas__74_THEN_ca_ETC___d953 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_masterPortShim_rff$D_OUT[1] &&
	     cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_ld_val
  assign cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2 ;
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] == 2'd0) ;

  // register cache_rg_lower_tag
  assign cache_rg_lower_tag$D_IN = cache_masterPortShim_rff$D_OUT[0] ;
  assign cache_rg_lower_tag$EN = MUX_cache_rg_lower_word64$write_1__SEL_2 ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = cache_masterPortShim_rff$D_OUT[67:4] ;
  assign cache_rg_lower_word64$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     !cache_masterPortShim_rff$D_OUT[1] ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;

  // register cache_rg_lower_word64_full
  always@(MUX_cache_rg_lower_word64_full$write_1__SEL_1 or
	  cache_masterPortShim_rff$D_OUT or
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop or
	  cache_rg_lower_word64_full or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_lower_word64_full$write_1__SEL_1:
	  cache_rg_lower_word64_full$D_IN =
	      !cache_masterPortShim_rff$D_OUT[1];
      WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop:
	  cache_rg_lower_word64_full$D_IN = !cache_rg_lower_word64_full;
      MUX_cache_rg_lower_word64_full$write_1__SEL_3:
	  cache_rg_lower_word64_full$D_IN = 1'd0;
      default: cache_rg_lower_word64_full$D_IN =
		   1'bx /* unspecified value */ ;
    endcase
  end
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_masterPortShim_rff$D_OUT[1]) &&
	     (cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	      !cache_masterPortShim_rff$D_OUT[1]) ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = 32'h0 ;
  assign cache_rg_lrsc_pa$EN = 1'b0 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN = 1'd0 ;
  assign cache_rg_lrsc_valid$EN = CAN_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_mem_req_sent
  assign cache_rg_mem_req_sent$D_IN = EN_req ;
  assign cache_rg_mem_req_sent$EN = 1'd1 ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN = req_st_value ;
  assign cache_rg_st_amo_val$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__SEL_3 or
	  MUX_cache_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_5 or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_start_reset)
  case (1'b1)
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    MUX_cache_rg_state$write_1__SEL_2: cache_rg_state$D_IN = 4'd2;
    MUX_cache_rg_state$write_1__SEL_3:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_5:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    default: cache_rg_state$D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset &&
	     cache_rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_masterPortShim_rff$D_OUT[1] ||
	      cache_masterPortShim_rff$D_OUT[1] &&
	      cache_masterPortShim_rff$D_OUT[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_tlb_walk
  assign cache_rg_tlb_walk$D_IN = 1'b0 ;
  assign cache_rg_tlb_walk$EN = 1'b0 ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_fabric_write_reqs
  assign cache_f_fabric_write_reqs$D_IN = 164'h0 ;
  assign cache_f_fabric_write_reqs$ENQ = 1'b0 ;
  assign cache_f_fabric_write_reqs$DEQ = 1'b0 ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_2 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_2 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_masterPortShim_arff
  assign cache_masterPortShim_arff$D_IN =
	     { 5'd0, cline_fabric_addr__h22577, 29'd7143424 } ;
  assign cache_masterPortShim_arff$ENQ =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_masterPortShim_arff$DEQ = EN_mem_master_ar_drop ;
  assign cache_masterPortShim_arff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_awff
  assign cache_masterPortShim_awff$D_IN = 98'h0 ;
  assign cache_masterPortShim_awff$ENQ = 1'b0 ;
  assign cache_masterPortShim_awff$DEQ = EN_mem_master_aw_drop ;
  assign cache_masterPortShim_awff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_bff
  assign cache_masterPortShim_bff$D_IN = mem_master_b_put_val ;
  assign cache_masterPortShim_bff$ENQ = EN_mem_master_b_put ;
  assign cache_masterPortShim_bff$DEQ = 1'b0 ;
  assign cache_masterPortShim_bff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_rff
  assign cache_masterPortShim_rff$D_IN = mem_master_r_put_val ;
  assign cache_masterPortShim_rff$ENQ = EN_mem_master_r_put ;
  assign cache_masterPortShim_rff$DEQ =
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_masterPortShim_rff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_masterPortShim_wff
  assign cache_masterPortShim_wff$D_IN = 74'h0 ;
  assign cache_masterPortShim_wff$ENQ = 1'b0 ;
  assign cache_masterPortShim_wff$DEQ = EN_mem_master_w_drop ;
  assign cache_masterPortShim_wff$CLR =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:5] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       cache_rg_addr[11:5] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'bxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  :
	       23'bxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA = cache_rg_word128_set_in_cache ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA = { x__h23824, x__h23829 } ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q45 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_width_code_65_EQ_0b11_74_THEN_IF_c_ETC___d449 =
	     (cache_rg_width_code == 3'b011) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[128] ;
  assign IF_cache_w_req_width_code_whas__74_THEN_cache__ETC___d969 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign IF_cache_w_req_width_code_whas__74_THEN_cache__ETC___d974 =
	     (IF_cache_w_req_width_code_whas__74_THEN_cache__ETC___d969 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     !cache_cfg_verbosity_read__26_ULE_1___d334 ;
  assign NOT_IF_cache_w_req_width_code_whas__74_THEN_ca_ETC___d953 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679 =
	     cache_cfg_verbosity > 4'd2 ;
  assign _0__q44 = 2'd0 ;
  assign _theResult___snd__h26839 =
	     (cache_rg_addr[2:0] == 3'd0) ?
	       cache_masterPortShim_rff$D_OUT[67:4] :
	       64'd0 ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d295 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[2]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[2]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[2]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[2]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[1]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[1]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[1]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[1]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[0]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[0]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[0]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[0]) } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d296 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[4]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[4]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[4]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[4]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[3]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[3]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[3]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[3]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d295 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d297 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[6]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[6]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[6]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[6]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[5]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[5]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[5]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[5]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d296 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d298 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[8]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[8]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[8]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[8]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[7]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[7]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[7]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[7]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d297 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d299 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[10]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[10]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[10]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[10]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[9]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[9]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[9]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[9]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d298 } ;
  assign cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d300 =
	     { (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[12]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[12]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[12]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[12]),
	       (CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
		cache_aw_events_wires_ifc_ifc_wires_1$wget[11]) |
	       (CAN_FIRE_RL_cache_rl_count_miss_lat &&
		cache_aw_events_wires_ifc_ifc_wires_3$wget[11]) |
	       (MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 &&
		cache_aw_events_wires_ifc_ifc_wires_4$wget[11]) |
	       (EN_req && cache_aw_events_wires_ifc_ifc_wires_6$wget[11]),
	       cache_aw_events_wires_ifc_ifc_wires_whas_AND_c_ETC___d299 } ;
  assign cache_cfg_verbosity_read__26_ULE_1___d334 =
	     cache_cfg_verbosity <= 4'd1 ;
  assign cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1 =
	     cache_masterPortShim_rff$D_OUT[11:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4 =
	     cache_masterPortShim_rff$D_OUT[19:12] ;
  assign cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2 =
	     cache_masterPortShim_rff$D_OUT[19:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5 =
	     cache_masterPortShim_rff$D_OUT[27:20] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6 =
	     cache_masterPortShim_rff$D_OUT[35:20] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7 =
	     cache_masterPortShim_rff$D_OUT[35:28] ;
  assign cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3 =
	     cache_masterPortShim_rff$D_OUT[35:4] ;
  assign cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8 =
	     cache_masterPortShim_rff$D_OUT[43:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9 =
	     cache_masterPortShim_rff$D_OUT[51:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11 =
	     cache_masterPortShim_rff$D_OUT[51:44] ;
  assign cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12 =
	     cache_masterPortShim_rff$D_OUT[59:52] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10 =
	     cache_masterPortShim_rff$D_OUT[67:36] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13 =
	     cache_masterPortShim_rff$D_OUT[67:52] ;
  assign cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14 =
	     cache_masterPortShim_rff$D_OUT[67:60] ;
  assign cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7122 ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441 =
	     cache_ram_word128_set$DOB & y__h7729 ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q15 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[7:0] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q16 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[15:0] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[31:0] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[15:8] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[23:16] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[31:16] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[31:24] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[39:32] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[47:32] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:32] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[47:40] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[55:48] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:48] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:56] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[71:64] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[79:64] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[95:64] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[79:72] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[87:80] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[95:80] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[95:88] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[103:96] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[111:96] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:96] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[111:104] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[119:112] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:112] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:120] ;
  assign cline_addr__h22576 = { cache_rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h22577 = { 32'd0, cline_addr__h22576 } ;
  assign pa_ctag__h7122 = { 2'd0, cache_rg_addr[31:12] } ;
  assign result_lo__h20622 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[7:0] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q15[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q15 } ;
  assign result_lo__h20657 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[15:8] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18 } ;
  assign result_lo__h20690 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[23:16] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19 } ;
  assign result_lo__h20723 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[31:24] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21 } ;
  assign result_lo__h20756 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[39:32] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22 } ;
  assign result_lo__h20789 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[47:40] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25 } ;
  assign result_lo__h20822 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[55:48] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26 } ;
  assign result_lo__h20855 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:56] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28 } ;
  assign result_lo__h20888 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[71:64] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29 } ;
  assign result_lo__h20921 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[79:72] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32 } ;
  assign result_lo__h20954 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[87:80] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33 } ;
  assign result_lo__h20987 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[95:88] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35 } ;
  assign result_lo__h21020 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[103:96] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36 } ;
  assign result_lo__h21053 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[111:104] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39 } ;
  assign result_lo__h21086 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[119:112] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40 } ;
  assign result_lo__h21119 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:120] } :
	       { {56{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42[7]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42 } ;
  assign result_lo__h21174 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[15:0] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q16[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q16 } ;
  assign result_lo__h21207 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[31:16] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20 } ;
  assign result_lo__h21240 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[47:32] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23 } ;
  assign result_lo__h21273 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:48] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27 } ;
  assign result_lo__h21306 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[79:64] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30 } ;
  assign result_lo__h21339 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[95:80] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34 } ;
  assign result_lo__h21372 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[111:96] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37 } ;
  assign result_lo__h21405 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:112] } :
	       { {48{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41[15]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41 } ;
  assign result_lo__h21452 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[31:0] } :
	       { {32{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17[31]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17 } ;
  assign result_lo__h21485 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:32] } :
	       { {32{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24[31]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24 } ;
  assign result_lo__h21518 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[95:64] } :
	       { {32{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31[31]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31 } ;
  assign result_lo__h21551 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:96] } :
	       { {32{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38[31]}},
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38 } ;
  assign result_lo__h26929 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[11:4] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_11_TO_4__q1 } ;
  assign result_lo__h26962 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[19:12] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_19_TO_12__q4 } ;
  assign result_lo__h26995 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[27:20] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_27_TO_20__q5 } ;
  assign result_lo__h27028 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[35:28] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_28__q7 } ;
  assign result_lo__h27061 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[43:36] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_43_TO_36__q8 } ;
  assign result_lo__h27094 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[51:44] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_51_TO_44__q11 } ;
  assign result_lo__h27127 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[59:52] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_59_TO_52__q12 } ;
  assign result_lo__h27160 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_masterPortShim_rff$D_OUT[67:60] } :
	       { {56{cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14[7]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_60__q14 } ;
  assign result_lo__h27223 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[19:4] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_19_TO_4__q2 } ;
  assign result_lo__h27256 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[35:20] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_20__q6 } ;
  assign result_lo__h27289 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[51:36] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_51_TO_36__q9 } ;
  assign result_lo__h27322 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_masterPortShim_rff$D_OUT[67:52] } :
	       { {48{cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13[15]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_52__q13 } ;
  assign result_lo__h27373 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_masterPortShim_rff$D_OUT[35:4] } :
	       { {32{cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3[31]}},
		 cache_masterPortShim_rffD_OUT_BITS_35_TO_4__q3 } ;
  assign result_lo__h27406 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_masterPortShim_rff$D_OUT[67:36] } :
	       { {32{cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10[31]}},
		 cache_masterPortShim_rffD_OUT_BITS_67_TO_36__q10 } ;
  assign x__h20583 =
	     { _theResult___snd_snd__h20585, _theResult___snd_fst__h20584 } ;
  assign x__h23824 =
	     { cache_masterPortShim_rff$D_OUT[0], cache_rg_lower_tag } ;
  assign x__h23829 =
	     { cache_masterPortShim_rff$D_OUT[67:4], cache_rg_lower_word64 } ;
  assign y__h7729 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359}} ;
  always@(cache_rg_width_code or
	  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011: _theResult___snd_snd__h20585 = 64'd0;
      3'd4:
	  _theResult___snd_snd__h20585 =
	      cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:64];
      default: _theResult___snd_snd__h20585 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___snd__h7678 =
	      cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:0];
      4'h8:
	  _theResult___snd__h7678 =
	      cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[127:64];
      default: _theResult___snd__h7678 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h21452 or
	  result_lo__h21485 or result_lo__h21518 or result_lo__h21551)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611 =
	      result_lo__h21452;
      4'h4:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611 =
	      result_lo__h21485;
      4'h8:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611 =
	      result_lo__h21518;
      4'hC:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611 =
	      result_lo__h21551;
      default: IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h27223 or
	  result_lo__h27256 or result_lo__h27289 or result_lo__h27322)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823 =
	      result_lo__h27223;
      3'd2:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823 =
	      result_lo__h27256;
      3'd4:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823 =
	      result_lo__h27289;
      3'd6:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823 =
	      result_lo__h27322;
      default: IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h21174 or
	  result_lo__h21207 or
	  result_lo__h21240 or
	  result_lo__h21273 or
	  result_lo__h21306 or
	  result_lo__h21339 or result_lo__h21372 or result_lo__h21405)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21174;
      4'h2:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21207;
      4'h4:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21240;
      4'h6:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21273;
      4'h8:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21306;
      4'hA:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21339;
      4'hC:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21372;
      4'hE:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
	      result_lo__h21405;
      default: IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h26929 or
	  result_lo__h26962 or
	  result_lo__h26995 or
	  result_lo__h27028 or
	  result_lo__h27061 or
	  result_lo__h27094 or result_lo__h27127 or result_lo__h27160)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h26929;
      3'd1:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h26962;
      3'd2:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h26995;
      3'd3:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h27028;
      3'd4:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h27061;
      3'd5:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h27094;
      3'd6:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h27127;
      3'd7:
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 =
	      result_lo__h27160;
    endcase
  end
  always@(cache_rg_addr or result_lo__h27373 or result_lo__h27406)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo7373_ETC__q43 =
	      result_lo__h27373;
      3'd4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo7373_ETC__q43 =
	      result_lo__h27406;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo7373_ETC__q43 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803 or
	  IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo7373_ETC__q43 or
	  _theResult___snd__h26839 or cache_masterPortShim_rff$D_OUT)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___snd_fst__h26892 =
	      IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d803;
      3'd1:
	  _theResult___snd_fst__h26892 =
	      IF_cache_rg_addr_46_BITS_2_TO_0_55_EQ_0_56_THE_ETC___d823;
      3'b010:
	  _theResult___snd_fst__h26892 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo7373_ETC__q43;
      3'b011: _theResult___snd_fst__h26892 = _theResult___snd__h26839;
      3'd4:
	  _theResult___snd_fst__h26892 = cache_masterPortShim_rff$D_OUT[67:4];
      default: _theResult___snd_fst__h26892 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h20622 or
	  result_lo__h20657 or
	  result_lo__h20690 or
	  result_lo__h20723 or
	  result_lo__h20756 or
	  result_lo__h20789 or
	  result_lo__h20822 or
	  result_lo__h20855 or
	  result_lo__h20888 or
	  result_lo__h20921 or
	  result_lo__h20954 or
	  result_lo__h20987 or
	  result_lo__h21020 or
	  result_lo__h21053 or result_lo__h21086 or result_lo__h21119)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20622;
      4'h1:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20657;
      4'h2:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20690;
      4'h3:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20723;
      4'h4:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20756;
      4'h5:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20789;
      4'h6:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20822;
      4'h7:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20855;
      4'h8:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20888;
      4'h9:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20921;
      4'hA:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20954;
      4'hB:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h20987;
      4'hC:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h21020;
      4'hD:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h21053;
      4'hE:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h21086;
      4'hF:
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 =
	      result_lo__h21119;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551 or
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591 or
	  IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611 or
	  _theResult___snd__h7678 or
	  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___snd_fst__h20584 =
	      IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d551;
      3'd1:
	  _theResult___snd_fst__h20584 =
	      IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d591;
      3'b010:
	  _theResult___snd_fst__h20584 =
	      IF_cache_rg_addr_46_BITS_3_TO_0_51_EQ_0x0_75_T_ETC___d611;
      3'b011: _theResult___snd_fst__h20584 = _theResult___snd__h7678;
      3'd4:
	  _theResult___snd_fst__h20584 =
	      cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441[63:0];
      default: _theResult___snd_fst__h20584 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY 14'd0;
	cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cache_aw_events_register$EN)
	  cache_aw_events_register <= `BSV_ASSIGNMENT_DELAY
	      cache_aw_events_register$D_IN;
	if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_rg_cache_rereq_data$EN)
	  cache_rg_cache_rereq_data <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cache_rereq_data$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_ld_val$EN)
	  cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_mem_req_sent$EN)
	  cache_rg_mem_req_sent <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_mem_req_sent$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_tlb_walk$EN)
	  cache_rg_tlb_walk <= `BSV_ASSIGNMENT_DELAY cache_rg_tlb_walk$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_allow_cap$EN)
      cache_rg_allow_cap <= `BSV_ASSIGNMENT_DELAY cache_rg_allow_cap$D_IN;
    if (cache_rg_amo_funct5$EN)
      cache_rg_amo_funct5 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct5$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_lower_tag$EN)
      cache_rg_lower_tag <= `BSV_ASSIGNMENT_DELAY cache_rg_lower_tag$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_aw_events_register = 14'h2AAA;
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_allow_cap = 1'h0;
    cache_rg_amo_funct5 = 5'h0A;
    cache_rg_cache_rereq_data = 1'h0;
    cache_rg_cset_in_cache = 7'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_tag = 1'h0;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_mem_req_sent = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_tlb_walk = 1'h0;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h5598 = $stime;
	  #0;
	end
    v__h5592 = v__h5598 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h5592,
		 "I_MMU_Cache",
		 $signed(32'd4),
		 $signed(32'd1),
		 $signed(32'd32),
		 $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h6321 = $stime;
	  #0;
	end
    v__h6315 = v__h6321 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6315,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7122,
		 cache_rg_addr[11:5],
		 cache_rg_addr[4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "allow_cap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 6'bxxxxxx /* unspecified value */ , " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h21764 = $stime;
	  #0;
	end
    v__h21758 = v__h21764 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21758,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d441);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  (!cache_ram_state_and_ctag_cset$DOB[22] ||
	   !cache_ram_state_and_ctag_cset_b_read__52_BITS__ETC___d359) &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h22528 = $stime;
	  #0;
	end
    v__h22522 = v__h22528 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.rl_start_cache_refill: ", v__h22522, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", cline_fabric_addr__h22577);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	begin
	  v__h23291 = $stime;
	  #0;
	end
    v__h23285 = v__h23291 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h23285,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[72:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h23561 = $stime;
	  #0;
	end
    v__h23555 = v__h23561 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h23555,
		 "I_MMU_Cache",
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { x__h23824, x__h23829 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  (cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write(" 0x%0x", { x__h23824, x__h23829 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__26_ULE_2_78___d679)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:5],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h26538 = $stime;
	  #0;
	end
    v__h26532 = v__h26538 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h26532,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[72:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  !cache_masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("'h%h", cache_masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h27765 = $stime;
	  #0;
	end
    v__h27759 = v__h27765 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h27759,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0, _theResult___snd_fst__h26892 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h27901 = $stime;
	  #0;
	end
    v__h27895 = v__h27901 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h27895,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h27595 = $stime;
	  #0;
	end
    v__h27589 = v__h27595 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h27589,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h23829 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h28030 = $stime;
	  #0;
	end
    v__h28024 = v__h28030 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_masterPortShim_rff$D_OUT[1] &&
	  cache_masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h28024,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h6093 = $stime;
	  #0;
	end
    v__h6087 = v__h6093 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h6087,
		 "I_MMU_Cache",
		 $signed(32'd128),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h6190 = $stime;
	  #0;
	end
    v__h6184 = v__h6190 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h6184, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	begin
	  v__h33417 = $stime;
	  #0;
	end
    v__h33411 = v__h33417 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("%0d: %m.req: op:", v__h33411);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__26_ULE_1___d334)
	$display("    amo_funct5 = 0x%0h", req_amo_funct5);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  IF_cache_w_req_width_code_whas__74_THEN_cache__ETC___d974)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1997, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1996, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1995, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1994, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_ICache

